# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'plot_ui_15.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import QVBoxLayout, QComboBox, QPushButton, QWidget
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5 import QtCore, QtGui, QtWidgets
import random
import matplotlib.pyplot as plt
import numpy as np
from scipy.fftpack import fft, ifft, fftfreq
from scipy.signal import find_peaks, butter, lfilter, freqz
from peakdetect import peakdetect
from matplotlib.offsetbox import AnchoredText
import mplcursors
import re
import pandas as pd
import seaborn as sns
from scipy.fft import fft, fftfreq, ifft, fftshift
from scipy import fftpack, stats, signal
import statistics
from scipy.stats import norm
import scipy.stats
from scipy import stats
import pylab
import math

# This is class for Plot
class Ui_Plot(object):
    def setupUi(self, Plot):
        Plot.setObjectName("Plot")
        Plot.setEnabled(True)
        Plot.resize(1025, 665)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Plot.sizePolicy().hasHeightForWidth())
        Plot.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(Plot)
        self.centralwidget.setObjectName("centralwidget")
#################################################################################################################################################################################
        # groupBox start from here
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.tempInt = 3
        self.groupBox.setGeometry(QtCore.QRect(20, 20, 991, 141))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 56, 971, 81))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.samplingFreq = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.samplingFreq.setObjectName("samplingFreq")
        self.gridLayout.addWidget(self.samplingFreq, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 0, 6, 1, 1)
        self.cutoff_freq = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.cutoff_freq.setObjectName("cutoff_freq")
        self.gridLayout.addWidget(self.cutoff_freq, 0, 5, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(160, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 3, 1, 1)
        self.parameter1_list = QtWidgets.QComboBox(self.gridLayoutWidget)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.parameter1_list.sizePolicy().hasHeightForWidth())
        self.parameter1_list.setSizePolicy(sizePolicy)
        self.parameter1_list.setMinimumSize(QtCore.QSize(200, 0))
        self.parameter1_list.setMaximumSize(QtCore.QSize(235, 16777215))
        self.parameter1_list.setObjectName("parameter1_list")
        self.gridLayout.addWidget(self.parameter1_list, 1, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.gridLayoutWidget)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 1, 4, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 0, 4, 1, 1)
        self.parameter2_list = QtWidgets.QComboBox(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.parameter2_list.sizePolicy().hasHeightForWidth())
        self.parameter2_list.setSizePolicy(sizePolicy)
        self.parameter2_list.setMinimumSize(QtCore.QSize(225, 0))
        self.parameter2_list.setObjectName("parameter2_list")
        self.gridLayout.addWidget(self.parameter2_list, 1, 5, 1, 1)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 20, 971, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.textBrowser = QtWidgets.QTextBrowser(self.horizontalLayoutWidget)
        self.textBrowser.setMaximumSize(QtCore.QSize(16777215, 30))
        self.textBrowser.setMouseTracking(False)
        self.textBrowser.setAcceptDrops(True)
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalLayout.addWidget(self.textBrowser)
        self.fileBrowse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.fileBrowse.setFont(font)
        self.fileBrowse.setObjectName("fileBrowse")
        self.horizontalLayout.addWidget(self.fileBrowse)

###########################################################################################################################################
        # groupBox_2 start from here
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 170, 991, 281))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setUnderline(True)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 28, 981, 251))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.powerspectrum_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.powerspectrum_plt.setFont(font)
        self.powerspectrum_plt.setObjectName("powerspectrum_plt")
        self.gridLayout_2.addWidget(self.powerspectrum_plt, 3, 0, 1, 1)
        self.FFTPlot = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.FFTPlot.setFont(font)
        self.FFTPlot.setObjectName("FFTPlot")
        self.gridLayout_2.addWidget(self.FFTPlot, 0, 0, 1, 1)
        self.crosscorelation_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.crosscorelation_plt.setFont(font)
        self.crosscorelation_plt.setObjectName("crosscorelation_plt")
        self.gridLayout_2.addWidget(self.crosscorelation_plt, 4, 3, 1, 1)
        self.highpass_filter = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.highpass_filter.setFont(font)
        self.highpass_filter.setObjectName("highpass_filter")
        self.gridLayout_2.addWidget(self.highpass_filter, 2, 3, 1, 1)
        self.phasespectrum_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.phasespectrum_plt.setFont(font)
        self.phasespectrum_plt.setObjectName("phasespectrum_plt")
        self.gridLayout_2.addWidget(self.phasespectrum_plt, 3, 3, 1, 1)
        self.magnitudespectrum_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.magnitudespectrum_plt.setFont(font)
        self.magnitudespectrum_plt.setObjectName("magnitudespectrum_plt")
        self.gridLayout_2.addWidget(self.magnitudespectrum_plt, 5, 3, 1, 1)
        self.auto_corelation = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.auto_corelation.setFont(font)
        self.auto_corelation.setObjectName("auto_corelation")
        self.gridLayout_2.addWidget(self.auto_corelation, 4, 0, 1, 1)
        self.interpolation_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.interpolation_plt.setFont(font)
        self.interpolation_plt.setObjectName("interpolation_plt")
        self.gridLayout_2.addWidget(self.interpolation_plt, 1, 0, 1, 1)
        self.coherence_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        font.setUnderline(False)
        self.coherence_plt.setFont(font)
        self.coherence_plt.setObjectName("coherence_plt")
        self.gridLayout_2.addWidget(self.coherence_plt, 1, 3, 1, 1)
        self.lowpass_filter = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.lowpass_filter.setFont(font)
        self.lowpass_filter.setObjectName("lowpass_filter")
        self.gridLayout_2.addWidget(self.lowpass_filter, 2, 0, 1, 1)
        self.smoothing = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.smoothing.setFont(font)
        self.smoothing.setObjectName("smoothing")
        self.gridLayout_2.addWidget(self.smoothing, 0, 3, 1, 1)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.gridLayoutWidget_2)
        self.plainTextEdit.setEnabled(False)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.gridLayout_2.addWidget(self.plainTextEdit, 0, 2, 6, 1)
        self.transfer_function = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.transfer_function.setFont(font)
        self.transfer_function.setObjectName("transfer_function")
        self.gridLayout_2.addWidget(self.transfer_function, 5, 0, 1, 1)

########################################################################################################################################################
        # groupBox_3 start from here
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(20, 460, 991, 181))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setUnderline(True)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.groupBox_3)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(10, 25, 971, 151))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")

        self.linear_regression = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.linear_regression.setFont(font)
        self.linear_regression.setObjectName("linear_regression")
        self.gridLayout_3.addWidget(self.linear_regression, 0, 4, 1, 1)

        self.distribution_func = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.distribution_func.setFont(font)
        self.distribution_func.setObjectName("distribution_func")
        self.gridLayout_3.addWidget(self.distribution_func, 0, 2, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 0, 1, 1, 1)

        self.statistics_plt = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.statistics_plt.setFont(font)
        self.statistics_plt.setObjectName("statistics_plt")
        self.gridLayout_3.addWidget(self.statistics_plt, 0, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem2, 0, 3, 1, 1)

        # Modified by Suraj 
        self.density_of_min_and_max = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.density_of_min_and_max.setFont(font)
        self.density_of_min_and_max.setObjectName("density_of_min_and_max")
        self.gridLayout_3.addWidget(self.density_of_min_and_max, 1, 0, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 1, 1, 1, 1)

        self.decibel_conversion = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.decibel_conversion.setFont(font)
        self.decibel_conversion.setObjectName("decibel_conversion")
        self.gridLayout_3.addWidget(self.decibel_conversion, 1, 2, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 1, 3, 1, 1)

        self.reverse_decibel_conversion = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.reverse_decibel_conversion.setFont(font)
        self.reverse_decibel_conversion.setObjectName("reverse_decibel_conversion")
        self.gridLayout_3.addWidget(self.reverse_decibel_conversion, 1, 4, 1, 1)

        self.linear_function = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.linear_function.setFont(font)
        self.linear_function.setObjectName("linear_function")
        self.gridLayout_3.addWidget(self.linear_function, 2, 0, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 2, 1, 1, 1)

        self.sign_function = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.sign_function.setFont(font)
        self.sign_function.setObjectName("sign_function")
        self.gridLayout_3.addWidget(self.sign_function, 2, 2, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 2, 3, 1, 1)

        self.indicator_function = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.indicator_function.setFont(font)
        self.indicator_function.setObjectName("indicator_function")
        self.gridLayout_3.addWidget(self.indicator_function, 2, 4, 1, 1)

        self.inter_correlation = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.inter_correlation.setFont(font)
        self.inter_correlation.setObjectName("inter_correlation")
        self.gridLayout_3.addWidget(self.inter_correlation, 3, 0, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 3, 1, 1, 1)

        self.inter_channel_averages = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.inter_channel_averages.setFont(font)
        self.inter_channel_averages.setObjectName("inter_channel_averages")
        self.gridLayout_3.addWidget(self.inter_channel_averages, 3, 2, 1, 1)

        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 3, 3, 1, 1)

        # self.distribution_and_density = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        # font = QtGui.QFont()
        # font.setFamily("MS Shell Dlg 2")
        # font.setPointSize(12)
        # self.distribution_and_density.setFont(font)
        # self.distribution_and_density.setObjectName("distribution_and_density")
        # self.gridLayout_3.addWidget(self.distribution_and_density, 3, 4, 1, 1)

        self.statistics_on_set_of_parameters = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.statistics_on_set_of_parameters.setFont(font)
        self.statistics_on_set_of_parameters.setObjectName("statistics_on_set_of_parameters")
        self.gridLayout_3.addWidget(self.statistics_on_set_of_parameters, 3, 4, 1, 1)

        # spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        # self.gridLayout_3.addItem(spacerItem1, 4, 1, 1, 1)

        # self.module = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        # font = QtGui.QFont()
        # font.setFamily("MS Shell Dlg 2")
        # font.setPointSize(12)
        # self.module.setFont(font)
        # self.module.setObjectName("module")
        # self.gridLayout_3.addWidget(self.module, 4, 2, 1, 1)

        # spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        # self.gridLayout_3.addItem(spacerItem1, 4, 3, 1, 1)

        # self.indicator_function = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        # font = QtGui.QFont()
        # font.setFamily("MS Shell Dlg 2")
        # font.setPointSize(12)
        # self.indicator_function.setFont(font)
        # self.indicator_function.setObjectName("indicator_function")
        # self.gridLayout_3.addWidget(self.indicator_function, 4, 4, 1, 1)

        # End  

        Plot.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Plot)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1025, 21))
        self.menubar.setObjectName("menubar")
        Plot.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Plot)
        self.statusbar.setObjectName("statusbar")
        Plot.setStatusBar(self.statusbar)

        str= "QPushButton{border:2px solid #6593cf; border-radius:8px; color:black; background: qlineargradient(x1:0,y1:0,x2:0,y2:1,stop: 0.0 #d4eafa,stop:0.5 #d4eafa,stop:0.55 #84aed9,stop:1.0 #84aed9); min-height:20; min-width:120; font-size:13px} QPushButton:pressed{ background-color:white; border:2px solid black; color:black;} ##QPushButton:hover{ border:2px solid #6593cf; border-radius:8px; color:black; background: qlineargradient(x1:0,y1:0,x2:0,y2:1,stop: 0.0 #d4eafa,stop:0.5 #d4eafa,stop:0.55 #84aed9,stop:1.0 #84aed9); border:2px solid #513dff; font-size:13px}"
        self.FFTPlot.setStyleSheet(str)
        self.FFTPlot.setToolTip("Required inputs:"+"\n"+"1.Sampling rate"+"\n"+"2. Parameter 1")
        self.interpolation_plt.setStyleSheet(str)
        self.interpolation_plt.setToolTip("1. Sampling rate" + "\n" + "2. Parameter 1")
        self.lowpass_filter.setStyleSheet(str)
        self.lowpass_filter.setToolTip("Required inputs:" + "\n" + "1. Cutoff Frequency" + "\n" + "2. Parameter 1")

        self.highpass_filter.setStyleSheet(str)
        self.highpass_filter.setToolTip("Required inputs:" + "\n" + "1. Cutoff Frequency" + "\n" + "2.Parameter 1")
        self.crosscorelation_plt.setStyleSheet(str)
        self.crosscorelation_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1" + "\n" + "3. Parameter 2")
        self.powerspectrum_plt.setStyleSheet(str)
        self.powerspectrum_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1")
        self.magnitudespectrum_plt.setStyleSheet(str)
        self.magnitudespectrum_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1")

        self.smoothing.setStyleSheet(str)
        self.smoothing.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.coherence_plt.setStyleSheet(str)
        self.coherence_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1" + "\n" + "3. Parameter 2")
        self.phasespectrum_plt.setStyleSheet(str)
        self.phasespectrum_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1" + "\n" + "3. Parameter 2")
        self.auto_corelation.setStyleSheet(str)
        self.auto_corelation.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1")
        self.statistics_plt.setStyleSheet(str)
        self.statistics_plt.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.distribution_func.setStyleSheet(str)
        self.distribution_func.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.linear_regression.setStyleSheet(str)
        self.linear_regression.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.transfer_function.setStyleSheet(str)
        self.transfer_function.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        # Modified by Suraj

        self.density_of_min_and_max.setStyleSheet(str)
        self.density_of_min_and_max.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.decibel_conversion.setStyleSheet(str)
        self.decibel_conversion.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.reverse_decibel_conversion.setStyleSheet(str)
        self.reverse_decibel_conversion.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.linear_function.setStyleSheet(str)
        self.linear_function.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.sign_function.setStyleSheet(str)
        self.sign_function.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.indicator_function.setStyleSheet(str)
        self.indicator_function.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.inter_correlation.setStyleSheet(str)
        self.inter_correlation.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.inter_channel_averages.setStyleSheet(str)
        self.inter_channel_averages.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        # self.distribution_and_density.setStyleSheet(str)
        # self.distribution_and_density.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.statistics_on_set_of_parameters.setStyleSheet(str)
        self.statistics_on_set_of_parameters.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        # self.module.setStyleSheet(str)
        # self.module.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        # End -------------

        self.groupBox.setStyleSheet("QGroupBox{ background-color: #bdafa8;  font-size: 15px; border: 1px solid gray;border-radius: 15px;  margin-top: 3ex;} QGroupBox::title { border:2px solid #ffaf87; background-color: #e6fc83; subcontrol-origin: margin; left:25px; padding: 0 3px 0 3px;}")

        self.groupBox_2.setStyleSheet(
            "QGroupBox{ background-color: #bdafa8; font-size: 15px; border: 1px solid gray;border-radius: 15px;  margin-top: 3ex;} QGroupBox::title { border:2px solid #ffaf87; background-color: #e6fc83; subcontrol-origin: margin; left:25px; padding: 0 3px 0 3px;}")

        self.groupBox_3.setStyleSheet(
            "QGroupBox{ background-color: #bdafa8; font-size: 15px; border: 1px solid gray;border-radius: 15px;  margin-top: 3ex;} QGroupBox::title { border:2px solid #ffaf87; background-color: #e6fc83; subcontrol-origin: margin; left:25px; padding: 0 3px 0 3px;}")




        self.retranslateUi(Plot)
        self.fileBrowse.clicked.connect(self.file)
        self.FFTPlot.clicked.connect(self.fft_plot)
        self.statistics_plt.clicked.connect(self.statistics_plt1)
        self.interpolation_plt.clicked.connect(self.interpolation_plt1)
        self.coherence_plt.clicked.connect(self.coherence_plt1)
        self.phasespectrum_plt.clicked.connect(self.phasespectrum_plt1)
        self.powerspectrum_plt.clicked['bool'].connect(self.powerspectrum_plt1)
        self.magnitudespectrum_plt.clicked.connect(self.magnitudespectrum_plt1)
        self.crosscorelation_plt.clicked.connect(self.Crosscorelation_plt1)
        self.auto_corelation.clicked.connect(self.auto_corelation_plt1)
        self.linear_regression.clicked.connect(self.linear_regression_plt1)
        self.distribution_func.clicked.connect(self.distributionfunc_plt1)
        self.lowpass_filter.clicked.connect(self.digital_filter_lowpass_plt1)
        self.highpass_filter.clicked.connect(self.digital_filter_highpass_plot1)
        self.smoothing.clicked.connect(self.Smoothing_plt1)
        self.transfer_function.clicked.connect(self.transfer_function_plt)
        
        # Modified by Suraj
        self.density_of_min_and_max.clicked.connect(self.density_of_min_and_max_plt1)
        self.decibel_conversion.clicked.connect(self.decibel_conversion_plt1)
        self.reverse_decibel_conversion.clicked.connect(self.reverse_decibel_conversion_plt1)

        self.linear_function.clicked.connect(self.linear_function_plt1)
        self.sign_function.clicked.connect(self.sign_function_plt1)
        self.indicator_function.clicked.connect(self.indicator_function_plt1)

        self.inter_correlation.clicked.connect(self.inter_correlation_plt1)
        self.inter_channel_averages.clicked.connect(self.inter_channel_averages_plt1)
        # self.distribution_and_density.clicked.connect(self.distribution_and_density_plt1)
        self.statistics_on_set_of_parameters.clicked.connect(self.statistics_on_set_of_parameters_plt1)
        # self.module.clicked.connect(self.module_plt1)
        # self.indicator_function.clicked.connect(self.indicator_function_plt1)

        # End-----

        QtCore.QMetaObject.connectSlotsByName(Plot)

    def retranslateUi(self, Plot):
        _translate = QtCore.QCoreApplication.translate
        Plot.setWindowTitle(_translate("Plot", "Data Analysis"))
        self.label_2.setText(_translate("Plot", "Sampling rate:"))
        self.label_3.setText(_translate("Plot", "Steps/Sec"))
        self.label_9.setText(_translate("Plot", "Hz"))
        self.label_4.setText(_translate("Plot", "Parameter 1:"))
        self.label_6.setText(_translate("Plot", "Parameter 2:"))
        self.label_8.setText(_translate("Plot", "Cutoff frequency:"))
        self.fileBrowse.setText(_translate("Plot", "Browse"))
        self.groupBox_2.setTitle(_translate("Plot", "Signal processing:"))
        self.groupBox.setTitle(_translate("Plot", "Input Data:"))
        self.powerspectrum_plt.setText(_translate("Plot", "Power Spectrum"))
        self.FFTPlot.setText(_translate("Plot", "FFT"))
        self.crosscorelation_plt.setText(_translate("Plot", "Cross Corelation"))
        self.highpass_filter.setText(_translate("Plot", "Highpass Filter"))
        self.phasespectrum_plt.setText(_translate("Plot", "Phase Spectrum"))
        self.magnitudespectrum_plt.setText(_translate("Plot", "Magnitude Specturm"))
        self.auto_corelation.setText(_translate("Plot", "Auto Correlation"))
        self.interpolation_plt.setText(_translate("Plot", "Interpolation"))
        self.coherence_plt.setText(_translate("Plot", "Coherence"))
        self.lowpass_filter.setText(_translate("Plot", "Lowpass Filter"))
        self.smoothing.setText(_translate("Plot", "Smoothing"))
        self.transfer_function.setText(_translate("Plot", "Transfer Function"))
        self.groupBox_3.setTitle(_translate("Plot", "Statistical Processing:"))
        self.linear_regression.setText(_translate("Plot", "Linear Regression"))
        self.distribution_func.setText(_translate("Plot", "Distribution Function"))
        self.statistics_plt.setText(_translate("Plot", "Statistics Report"))

        # Modified by Suraj
        self.density_of_min_and_max.setText(_translate("Plot", "Density Of Min and Max"))
        self.decibel_conversion.setText(_translate("Plot", "Decibel Conversion"))
        self.reverse_decibel_conversion.setText(_translate("Plot", "Reverse Decibel Conversion"))

        self.linear_function.setText(_translate("Plot", "Linear Function"))
        self.sign_function.setText(_translate("Plot", "Sign Function"))
        self.indicator_function.setText(_translate("Plot", "Indicator Function"))

        self.inter_correlation.setText(_translate("Plot", "Inter Correlation"))
        self.inter_channel_averages.setText(_translate("Plot", "Inter Channel Averages"))
        # self.distribution_and_density.setText(_translate("Plot", "Distribution And Density"))

        self.statistics_on_set_of_parameters.setText(_translate("Plot", "Statistics On Set Of Parameters"))
        # self.module.setText(_translate("Plot", "Module"))
        # self.indicator_function.setText(_translate("Plot", "Indicator Function"))

        # End -------------

    def file(self):
        ''' Called when the user presses the Browse button
        '''
        # self.debugPrint( "Browse button pressed" )
        print(self.tempInt)
        options = QtWidgets.QFileDialog.Options()
        # options |= QtWidgets.QFileDialog.DontUseNativeDialog
        global fileName
        fileName = QtWidgets.QFileDialog.getOpenFileName(None,"Open"," ","Text files(*.txt *.csv)",options=options)

        # fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'Open File', '', 'Text Files (*.txt);;All Files (*)')
        # if not fileName:
        #     return


        # filenm = self.textBrowser.append(fileName[0])
        if (fileName[0] == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input file")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif (fileName[0]):
            self.textBrowser.setText(fileName[0])
            with open(fileName[0] ) as f:
                first_line = f.readline()
                 
            params = re.split(r',|\s',first_line) 
            params = list(filter(None, params)) # list of parameters
            self.parameter1_list.clear()
            self.parameter2_list.clear()

            self.parameter1_list.addItems(params)
            self.parameter2_list.addItems(params)

            self.parameter1_list.update()
            self.parameter2_list.update()

    def fft_plot(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return


        global data
        data = np.loadtxt(fileName[0], skiprows=1)
        x1 = self.parameter1_list.currentIndex()
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]

        # content = self.signal_property.currentText()
        # print(content)

        sns.set()

        sampling_freq = self.samplingFreq.text()
        global sampling_freq1
        # sampling_freq1 = float(sampling_freq)
        # sampling_freq_index = self.samplingFreq.index()

        sr = 1024

        if (y1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the Sampling Rate")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return
            #self.cutoff_freq.setEnabled(False)
            #self.parameter2_list.setEnabled(False)


        fig, ax = plt.subplots()
        fft_plt = fft(y[1:])
        sampling_freq1 = float(sampling_freq)
        # fft_plt_freq = fftfreq(len(fft_plt[1:]), 1 / sampling_freq1)  ...bramhaji
        fft_lenth = len(fft_plt[1:])
        y_smapleLen = len(y)
        n = np.arange(fft_lenth)
        T = y_smapleLen / sampling_freq1  # time period
        freq = n / T  # FFT frequency
        f1 = freq[: fft_lenth]
        plt.plot(f1, abs(fft_plt[1:len(fft_plt)]))
        freqs = f1


        # freqs = fftpack.fftfreq(len(fft_plt)) * sampling_freq1  ...bramhaji

        # yplot = fftshift(fft_plt) ...bramhaji
        # y_abs = 1 / N * np.abs(yplot) ...bramhaji

        '''modified by rohit k'''
        y_abs = np.abs(fft_plt)
        Peaks_indices, properties = find_peaks(y_abs,0)

        pks_values = y_abs[Peaks_indices]
        pks_values=set(pks_values)

        if(len(Peaks_indices) < 5):
            y_abs = np.abs(fft_plt)
            Peaks_indices, properties = find_peaks(y_abs, 0)

            pks_values = y_abs[Peaks_indices]
            pks_values = set(pks_values)
            first_5_max_peasks = np.argpartition(properties['peak_heights'], -len(Peaks_indices))[-len(Peaks_indices):]
            res2 = "Magnitude"+ "           " +"Frequency\n"
            for x in first_5_max_peasks:
                ferq = freqs[Peaks_indices[x]]
                res2=res2+str("{:.3f}".format(y_abs[Peaks_indices[x]])) + "         " +str("{:.3f}".format(ferq)) + "\n"
        else:
            first_5_max_peasks = np.argpartition(properties['peak_heights'], -5)[-5:]
            res2 = "Magnitude"+"                "+"Frequency\n"
            for x in first_5_max_peasks:
                ferq = freqs[Peaks_indices[x]]
                res2 = res2 + str("{:.3f}".format(y_abs[Peaks_indices[x]])) +"          "+ str("{:.3f}".format(ferq)) + "\n"

        anchored_txt1 = AnchoredText(res2, loc='lower left', prop=dict(size=9.5), frameon=True,
                                     bbox_to_anchor=(0., 1.),
                                     bbox_transform=ax.transAxes)
        anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
        ax.add_artist(anchored_txt1)

        mplcursors.cursor(hover=True)
        plt.xlabel("Frequency(Hz)")
        plt.ylabel("FFT of the Signal(Magnitude)")
        str1 = self.parameter1_list.currentText()
        plt.title("FFT result of " + str1, loc='right')
        # fig.tight_layout()
        fig = plt.gcf()
        fig.canvas.manager.set_window_title('FFT Plot')
        plt.show()

    def statistics_plt1(self):
            if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return

            sns.set()
            data = np.loadtxt(fileName[0],skiprows=1)
            x = data[:, 0]
            print(x)
            y1 = self.parameter1_list.currentIndex()
            y = data[:, y1]
            print(type(self.textBrowser.toPlainText()))
            
            if (y1 == 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the Parameter 1")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()

            elif (y1):

                    fig, ax = plt.subplots()
                    Mean = statistics.mean(y)  # calculate average of the data
                    Median = statistics.median(y)
                    STD = statistics.stdev(y)
                    Mode = stats.mode(list(y))
                    Variance = np.var(y)

                    stat_res = "Statistics Report:" + "\n" + "  =>Mean is " + str(float(Mean)) + "\n" + "  =>Median is " + str(
                        float(Median)) + "\n" + "  =>Mode is " + str(
                        float(np.array(Mode)[0])) + "\n" + "  =>Standard Deviation is " + str(float(STD))  + "\n" + "  =>Variance is " + str(float(Variance))
                    anchored_txt1 = AnchoredText(stat_res, loc='lower left', prop=dict(size=10), frameon=True,
                                                 bbox_to_anchor=(0., 1.), bbox_transform=ax.transAxes)
                    anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
                    ax.add_artist(anchored_txt1)

                    # plt.axvline(x = np.mean(y), color = 'r', label = 'Mean')
                    plt.plot(x, y)
                    plt.title("Time Series Data")
                    plt.xlabel("Time(Sec)")
                    plt.ylabel("Amplitude")
                    plt.tight_layout()
                    fig = plt.gcf()
                    fig.canvas.manager.set_window_title('Statistics Plot')
                    mplcursors.cursor(hover=True)
                    plt.show()

    def powerspectrum_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        sampling_freq = self.samplingFreq.text()

        if (y1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif (y1 ==0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif (y1 and sampling_freq):
            fig, ax = plt.subplots()
            yf = np.fft.fft(y)
            sampling_freq1 = float(sampling_freq)
            yf1 = np.fft.rfft(y)

            ps1 = 20 * np.log10(np.abs(yf1[1:]))
            
            str1 = self.parameter1_list.currentText()
            freq = np.linspace(0, sampling_freq1 / 2, len(ps1))
            res1 = "Maximum Power of " + str1 +" is " + str(float(max(list(ps1)))) + " dB"

            anchored_txt1 = AnchoredText(res1, loc='lower left', prop=dict(size=10), frameon=True,
                                         bbox_to_anchor=(0., 1.), bbox_transform=ax.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax.add_artist(anchored_txt1)

            magnitude = np.abs(ps1)
            pks, _ = find_peaks(magnitude[:30000], height=400)
            plt.plot(freq, ps1)
            max_freq = list(freq)
            print("Max freq is ", max(max_freq))
            print(freq.mean())

            plt.title(" Powerspectrum result of " + str1, loc = 'right')
            plt.xlabel("Frequency (Hz)")
            plt.ylabel("Power (dB)")
            mplcursors.cursor(hover=True)
            fig = plt.gcf()
            fig.canvas.manager.set_window_title('Power Spectrum Plot')
            plt.show()


    def density_of_min_and_max_plt1(self):
        if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return
        
        sns.set()

        data = np.loadtxt(fileName[0],  skiprows=1)
        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]
        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]

        if (x1 == 0 or y1 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select Parameter 1 and Parameter 2")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        else:
            df = pd.DataFrame({'Time': data[:, 0], f'{x1}': x, f'{y1}': y})
            a = self.parameter1_list.currentText()
            b = self.parameter2_list.currentText()

            max_density_x1 = df[f'{x1}'].max() / len(df)
            min_density_x1 = df[f'{x1}'].min() / len(df)
            max_density_y1 = df[f'{y1}'].max() / len(df)
            min_density_y1 = df[f'{y1}'].min() / len(df)

            # Plot the data
            fig, ax = plt.subplots(figsize=(8, 5))
            ax.plot(df['Time'], df[f'{x1}'], label=f'{a}')
            ax.plot(df['Time'], df[f'{y1}'], label=f'{b}')

            # Mark positions of maximum and minimum values
            ax.plot(df['Time'][df[f'{x1}'].idxmax()], df[f'{x1}'].max(), color='red', marker='o', label=f'{a}_Max')
            ax.plot(df['Time'][df[f'{x1}'].idxmin()], df[f'{x1}'].min(), color='blue', marker='o', label=f'{a}_Min')

            ax.plot(df['Time'][df[f'{y1}'].idxmax()], df[f'{y1}'].max(), color='green', marker='o', label=f'{b}_Max')
            ax.plot(df['Time'][df[f'{y1}'].idxmin()], df[f'{y1}'].min(), color='purple', marker='o', label=f'{b}_Min')

            # Display density information
            ax.annotate(f'Max Density {x1}: {max_density_x1:.4f}', xy=(0.5, 0.8), xycoords='axes fraction', color='red')
            ax.annotate(f'Min Density {x1}: {min_density_x1:.4f}', xy=(0.5, 0.75), xycoords='axes fraction', color='blue')
            ax.annotate(f'Max Density {y1}: {max_density_y1:.4f}', xy=(0.5, 0.7), xycoords='axes fraction', color='green')
            ax.annotate(f'Min Density {y1}: {min_density_y1:.4f}', xy=(0.5, 0.65), xycoords='axes fraction', color='purple')

            # Set plot labels and legend
            ax.set_xlabel('Time')
            ax.set_ylabel('Values')
            ax.legend()
            mplcursors.cursor(hover = True)
            fig.canvas.manager.set_window_title('Density of Min and Max')
            plt.title("Density of Min and Max")
            plt.show()
       
    def decibel_conversion_plt1(self):
        if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return
        
        sns.set()
        data = np.loadtxt(fileName[0],  skiprows=1)
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        parameterName = self.parameter1_list.currentText()

        def convert_to_decibel(P, P0):
    # Calculate decibel value
            return 10 * np.log10(P / P0)

        # Example data
        # frequency = np.logspace(1, 6, 1000)  # Generate logarithmically spaced frequencies
        reference_power = 1e-12  # Reference power level (adjust as needed)

        # Calculate decibel values for a hypothetical power curve
        measured_power = 1e-9 * np.sin(2 * np.pi * y * 1e-3)

        decibel_values = convert_to_decibel(measured_power, reference_power)

        # Plotting
        fig = plt.figure(figsize=(10, 6))
        plt.semilogx(y, decibel_values,label=f'{parameterName} in dB' )
        plt.xlabel('Frequency (Hz)')
        plt.ylabel(f'{parameterName} (dB)')
        plt.title('Decibels Conversion')
        plt.legend()
        mplcursors.cursor(hover = True)
        fig.canvas.manager.set_window_title('Decibels Conversion')
        plt.grid(True)
        plt.show()

    def reverse_decibel_conversion_plt1(self):
        if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return
        
        sns.set()
        data = np.loadtxt(fileName[0],  skiprows=1)
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        y_dB = y
        y = 10 ** (y_dB / 20)
        parameterName = self.parameter1_list.currentText()

        # Plotting
        fig = plt.figure(figsize=(8, 5))
        plt.plot(y_dB, y, label='Linear Scale')
        plt.xlabel(f'{parameterName} (dB)')
        plt.ylabel(f'{parameterName} (Linear Scale)')
        plt.title('Reverse Decibel Conversion')
        plt.legend()
        mplcursors.cursor(hover = True)
        fig.canvas.manager.set_window_title('Reverse Decibel Conversion')
        plt.grid(True)
        plt.show()

    def linear_function_plt1(self):
        if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return
        
        sns.set()
        data = np.loadtxt(fileName[0],  skiprows=1)

        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]
        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]


        if (x1 == 0 or y1 == 0 ):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(x1 and y1):
            str1 = self.parameter1_list.currentText()
            str2 = self.parameter2_list.currentText()
            a = data[x1]
            b = data[y1]
            slope_intercept = np.polyfit(a,b,1)
            slope , intercept = slope_intercept

            def linear_function(x, slope, intercept):
                return slope * x + intercept

            y= linear_function(x, slope, intercept)

        # Plot the linear function
        fig, ax = plt.subplots()
        plt.plot(x, y, label=f'Linear Function: y = {slope} x + {intercept}')
        plt.title('Linear Function Plot')
        plt.xlabel(str1)
        plt.ylabel(str2)
        plt.legend()
        plt.grid(True)
        fig.canvas.manager.set_window_title('Linear Function')
        plt.show()

    def sign_function_plt1(self):
        if self.textBrowser.toPlainText() == "":
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return


        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)

        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]
        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]

        if x1 == 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select Parameter 1")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        def sign_function(x):
            return np.where(x > 0, 1, np.where(x < 0, -1, 0))

        y_values = sign_function(x)

        # Plot the results
        fig = plt.figure(figsize=(8, 5))
        plt.plot(x, y_values, label='Sign Function')
        plt.xlabel('x')
        plt.ylabel('sign(x)')
        plt.title('Sign Function')
        plt.axhline(0, color='black', linewidth=0.5)
        plt.axvline(0, color='black', linewidth=0.5)
        plt.grid(color='gray', linestyle='--', linewidth=0.5)
        fig.canvas.manager.set_window_title('Sing Function')
        plt.ylim(-1, 1)
        plt.legend()
        plt.show()

    def indicator_function_plt1(self):
        if self.textBrowser.toPlainText() == "":
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return


        sns.set()
        try:
            data = np.genfromtxt(fileName[0], skip_header=1, dtype=float)
        except ValueError as e:    
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error loading data")
            msg.setWindowTitle("Warning")
            msg.setDetailedText(f"Error: {e}")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        def indicator_function(x):
            return np.where((x >= -1) & (x <= 1), 1, 0)

        y_values = indicator_function(data)

        # Plot the results
        fig = plt.figure(figsize=(8, 5))
        plt.step(data, y_values, label='Indicator Function', where='post')
        plt.xlabel('x')
        plt.ylabel('indicator(x)')
        plt.title('Indicator Function')
        plt.axhline(0, color='black', linewidth=0.5)
        plt.axvline(0, color='black', linewidth=0.5)
        plt.grid(color='gray', linestyle='--', linewidth=0.5)
        fig.canvas.manager.set_window_title('Indicator Function')
        plt.ylim(-0.1, 1.1)  # Set y-axis limit from -0.1 to 1.1
        plt.legend()
        plt.show()

    def inter_correlation_plt1(self):
        if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return
        
        sns.set()
        data = np.loadtxt(fileName[0],  skiprows=1)
        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]
        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]

        if (x1 == 0 ):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        param1 = self.parameter1_list.currentText()
        param2 = self.parameter2_list.currentText()

        inter_corr = np.correlate(x, y, mode='full')

        lags = np.arange(-len(x) + 1, len(x))

        fig, ax = plt.subplots()
        plt.plot(lags, inter_corr)
        plt.title(f'Inter-Correlation of {param1} and {param2}')
        plt.xlabel('Lag')
        plt.ylabel('Correlation')
        fig.canvas.manager.set_window_title('Inter-Correlation')
        plt.grid(True)
        plt.show()

    def inter_channel_averages_plt1(self):
        if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return
        
        sns.set()
        data = np.loadtxt(fileName[0],  skiprows=1)
        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]
        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]


        if (x1 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
        param = self.parameter1_list.currentText()
        data = data.mean(axis=1)

        fig, ax = plt.subplots()
        plt.plot(data, label=f'Inter-Channel Average of {param}')
        plt.title('Inter-Channel Averages Plot')
        plt.xlabel('Pixel')
        plt.ylabel('Average Value')
        fig.canvas.manager.set_window_title('Inter-Channel Averages')
        plt.legend()
        plt.grid(True)
        plt.show()

    def distribution_and_density_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return
        
        sns.set()
        data = np.loadtxt(fileName[0],  skiprows=1)
        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]
        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]


        if (x1 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
        
        plt.figure(figsize=(10, 6))
        sns.histplot(data[x], kde=True, color='blue', bins=30)  
        plt.title('Distribution of Data')
        plt.xlabel('X-axis label')
        plt.ylabel('Y-axis label')
        plt.show()

        plt.figure(figsize=(10, 6))
        sns.kdeplot(data[x], color='green', fill=True)  
        plt.title('Density of Data')
        plt.xlabel('X-axis label')
        plt.ylabel('Y-axis label')
        plt.show()

        pass

    def statistics_on_set_of_parameters_plt1(self):
            
            if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return

            sns.set()
            data = np.loadtxt(fileName[0],skiprows=1)
            x = data[:, 0]
            y1 = self.parameter1_list.currentIndex()
            y = data[:, y1]
            print(type(self.textBrowser.toPlainText()))
            
            if (y1 == 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the Parameter 1")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()

            elif (y1):

                    fig, ax = plt.subplots()
                    Mean = statistics.mean(y)  # calculate average of the data
                    Median = statistics.median(y)
                    STD = statistics.stdev(y)
                    Mode = stats.mode(list(y))
                    Variance = np.var(y)

                    stat_res = "Statistics Report:" + "\n" + "  =>Mean is " + str(float(Mean)) + "\n" + "  =>Median is " + str(
                        float(Median)) + "\n" + "  =>Mode is " + str(
                        float(np.array(Mode)[0])) + "\n" + "  =>Standard Deviation is " + str(float(STD))  + "\n" + "  =>Variance is " + str(float(Variance))
                    anchored_txt1 = AnchoredText(stat_res, loc='lower left', prop=dict(size=10), frameon=True,
                                                 bbox_to_anchor=(0., 1.), bbox_transform=ax.transAxes)
                    anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
                    ax.add_artist(anchored_txt1)

                    # plt.axvline(x = np.mean(y), color = 'r', label = 'Mean')
                    plt.plot(x, y)
                    plt.title("Time Series Data")
                    plt.xlabel("Time(Sec)")
                    plt.ylabel("Amplitude")
                    plt.tight_layout()
                    fig = plt.gcf()
                    fig.canvas.manager.set_window_title('Statistics Plot')
                    mplcursors.cursor(hover=True)
                    plt.show()
   
    def module_plt1(self):
        pass

        # End -------------

    def magnitudespectrum_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]

        fig, ax = plt.subplots()
        sampling_freq = self.samplingFreq.text()
        y2 = self.parameter1_list.currentText()

        if (y1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif (y1 ==0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif( y1 and sampling_freq):

            str1 = self.parameter1_list.currentText()
            sampling_freq1 = float(sampling_freq)
            # samp_freq1 = 1024  # sampling frequency
            plt.magnitude_spectrum(y, Fs=sampling_freq1)
            # plt.magnitude_spectrum(y, Fs=samp_freq1)
            plt.xlabel("Frequency (Hz)")
            plt.title("Magnitude Spectrum of " + str1)
            
            mplcursors.cursor(hover=True)
            fig = plt.gcf()
            fig.canvas.manager.set_window_title('Magnitude Spectrum Plot')
            plt.show()

    def coherence_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()

        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        z1 = self.parameter2_list.currentIndex()
        z = data[:, z1]
        sampling_freq = self.samplingFreq.text()


        if (y1 == 0 or z1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1, Parameter 2 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        fig, (ax1, ax2) = plt.subplots(2, 1)
        str1 = self.parameter1_list.currentText()
        str2 = self.parameter2_list.currentText()
        ax1.set_title("Time Series Plot representation of " + str1 + " and " + str2)
        ax1.plot(x, y, 'b', label=str1)
        ax1.plot(x, z, 'r', label=str2)
        # fig.legend()
        ax1.set_xlabel("Time(Sec)")
        ax1.set_ylabel("Amplitude(V)")
       
        coh= plt.cohere(y, z)
        cohArry=coh[0]
        freqArray=coh[1]
        indFreq=list(cohArry).index(max(list(cohArry)))
        FreqCorepndsToValue=list(freqArray)[indFreq]

        fig.legend()

        string_res1 = "=>If:" + "\n" + "   Coherence = 1.0 then two signals are Coherent" + "\n" + "   Coherence < 1.0 then two signals are Coherent with some Added Noise" + "\n" + "   Coherence = 0 then two signals are not Coherent"
        string_res = "=>Max coherence value is: " + str(float(max(list(cohArry)))) + " at Frequency of " + str(float(FreqCorepndsToValue)) + " Hz" + "\n" "=>Two Signals are Coherent if both are equal in Phase and Frequency" + "\n" + string_res1
        anchored_txt1 = AnchoredText(string_res, loc='lower left', prop=dict(size=11), frameon=True,bbox_to_anchor=(0., 1.), bbox_transform=ax1.transAxes)
        anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
        ax1.add_artist(anchored_txt1)

        plt.title("Coherence Spectrum between " + str1 + " and " + str2)


        plt.ylabel("Coherence")
        plt.xlabel("Frequency (Hz)")
        mplcursors.cursor(hover=True)
        plt.tight_layout()
        fig = plt.gcf()
        fig.canvas.manager.set_window_title('Coherence Plot')
        plt.show()

    def phasespectrum_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]

        plt.phase_spectrum(y, color = 'red')
        fig = plt.gcf()
        fig.canvas.manager.set_window_title("Phase Spectrum")
        mplcursors.cursor(hover = True)
        plt.show()

    def interpolation_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2, 1)
        data = pd.read_csv(fileName[0], sep = '\t', header = 0)
        df = pd.DataFrame(data)
        # print(df)

        interp_res = df.interpolate(method='linear', limit_direction='forward')
        df1 = pd.DataFrame(interp_res)
        # print(df1)

        numpy_array1 = df.to_numpy()  # converting dataframe into numpy array
        # print(numpy_array1)
        x = numpy_array1[:, 0]
        # print(x)
        y1 = self.parameter1_list.currentIndex()
        y = numpy_array1[:, y1]
        # print(y)
        ax1.plot(x, y, c='b', label='Original Data')
        ax1.set_title("Time Series Data")
        ax1.set_ylabel("Amplitude (V)")
        ax1.set_xlabel("Time(Sec)")

        numpy_array2 = df1.to_numpy()
        p = numpy_array2[:, 0]
        q = numpy_array2[:, y1]

        mplcursors.cursor(hover=True)
        fig.legend(loc='upper right')


        plt.xlabel("Time (Sec)")
        ax2.set_title("Result of Interpolation")
        ax2.plot(x, q, c = 'k', label = 'Data after Interpolation')
        fig.legend(loc='upper right')
        ax2.set_xlabel("Time(Sec)")
        ax2.set_ylabel("Amplitude(V)")
        plt.show()

    def Crosscorelation_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, [ax1, ax2] = plt.subplots(2)
        fig, (ax1, ax2, ax3) = plt.subplots(3)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        z1 = self.parameter2_list.currentIndex()
        z = data[:, z1]
        sampling_freq = self.samplingFreq.text()

        if (y1 and z1 and sampling_freq):

            sampling_freq1 = float(sampling_freq)
            N = len(y)
            corr = signal.correlate(z, y, mode='same') / np.sqrt(
                signal.correlate(y, y, mode='same')[int(N / 2)] * signal.correlate(z, z, mode='same')[int(N / 2)])
            delay_arr = np.linspace(-0.5 * N / sampling_freq1, 0.5 * N / sampling_freq1, N)
            delay = delay_arr[np.argmax(corr)]
            str1 = self.parameter1_list.currentText()
            str2 = self.parameter2_list.currentText()
            plt.xlabel("Lag of " + str1 + " relative " + " to " + str2 + " (Sec)")
            plt.ylabel("Crosscorrelation Coeffecient")

            ax2.plot(delay_arr, corr, c='g', label='Crosscorelation spectrum')

            time_delay_str = "Crosscorelation of " + str1 + " and " + str2 + "\n" + str1 + " is " + str(
                float(delay)) + " sec " + "\n" + " lags the " + str2 + "\n" + "Max Corelation Coeff: " + str(
                float(max(corr)))
            anchored_txt1 = AnchoredText(time_delay_str, loc='lower left', prop=dict(size=11.5), frameon=True,
                                         bbox_to_anchor=(0., 1.),
                                         bbox_transform=ax1.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax1.add_artist(anchored_txt1)

            ax1.set_title("Time Series of " + str1 + " and " + str2)
            ax2.set_title("Result of Crosscorelation Spectrum")
            ax1.plot(x, y, 'b', label=str1)
            ax1.plot(x, z, 'r', label=str2)
            fig.legend()

            ax1.set_xlabel("Time")
            ax1.set_ylabel("Amplitude")
            mplcursors.cursor(hover=True)
            plt.tight_layout()
            fig = plt.gcf()
            fig.canvas.manager.set_window_title('Crosscorelation Plot')
            plt.show()

        elif(y1 == 0 or z1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in input selection")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select Parameter1, Parameter 2 and enter the Sampling Frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

    def Smoothing_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2, 1)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        new_sig = y

        str1 = self.parameter1_list.currentText()
        ax1.plot(x, y, label = str1)
        ax1.set_title("Origianl Signal")
        ax1.set_ylabel("Amplitude")
        ax1.set_xlabel("Time")
        yhat = signal.savgol_filter(new_sig, 21, 2)

        ax2.set_title("Result of Smoothing")
        ax2.plot(x, yhat, c='r', label= str1 + ' after Smoothing')
        fig.legend(loc='upper right')
        mplcursors.cursor(hover=True)
        ax2.set_ylabel("Amplitude")
        ax2.set_xlabel("Time")
        plt.title("Result of the Smoothed signal")

        new_sig_fft = fftpack.fft(new_sig)
        angle = np.angle(new_sig_fft) * 180 / np.pi
        fig = plt.gcf()
        fig.canvas.manager.set_window_title('Smoothing Plot')
        plt.show()

    def distributionfunc_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data =  np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        data1 = np.random.normal(np.min(y), np.max(y), 150)
        fig, ax = plt.subplots()

        if(y1 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("No parameters selection")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select Parameter1")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(y1):

            str1 = self.parameter1_list.currentText()
            Mean = np.mean(y)
            Mean_abs = abs(Mean)
            Mean, Std = norm.fit(data1)
            plt.hist(data1, bins=25, density=True, alpha=0.6)
            min, max = plt.xlim()
            p = np.linspace(min, max, 100)
            q = scipy.stats.norm.pdf(p, Mean, Std)

            ax.plot(p, q, 'k', label='PDF ' + ' of ' + str1)
            fig.legend()
            plt.xlabel("Data Points")
            plt.ylabel("Probability Density")
            plt.title("Histogram representation of " + str1 + " with Distribution function", loc = 'right')
            res = "Histogram of " + str1 +  "\n" + "     => Mean ($\mu) = " + str(
                float(Mean_abs)) + "$" + "\n" + "    => STD ($\sigma) = " + str(float(Std)) + "$"
            anchored_txt1 = AnchoredText(res, loc='lower left', prop=dict(size=10.0), frameon=True,
                                         bbox_to_anchor=(0., 1.),
                                         bbox_transform=ax.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax.add_artist(anchored_txt1)

            fig.tight_layout()
            fig = plt.gcf()
            fig.canvas.manager.set_window_title('Distribution Function Plot')
            mplcursors.cursor(hover=True)
            plt.show()

    def digital_filter_lowpass_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        sampling_freq = self.samplingFreq.text()
        cutoff_freq1 = self.cutoff_freq.text()
        
        if(y1 == 0 or cutoff_freq1 == "" or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the Sampling frequency, Cutoff frequency ")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(y1 and cutoff_freq1 and sampling_freq):
            cutoff_freq2 = float(cutoff_freq1)
            global sampling_freq1
            sampling_freq1 = float(sampling_freq)
            def butter_lowpass(cutoff_freq2, fs, order=5):
                nyq = 0.5 * fs
                normal_cutoff = cutoff_freq2 / nyq
                b, a = butter(order, normal_cutoff, btype='low',
                              analog=False) 
                return b, a

            def butter_lowpass_filter(data, cutoff_freq2, fs, order=5):
                b, a = butter_lowpass(cutoff_freq2, fs, order=order)
                y = lfilter(b, a, data)  
                return y
            
            Nyq = 0.5 * sampling_freq1  
            order = 2
            b, a = butter_lowpass(cutoff_freq2, sampling_freq1, order)

            w, h = freqz(b, a, worN=512)
            ax2.plot(0.5 * sampling_freq1 * w / np.pi, np.abs(h), 'b')
            ax2.plot(cutoff_freq2, 0.5 * np.sqrt(2), 'ko')
            ax2.axvline(cutoff_freq2, c='k', label='Cutoff frequency')
            ax2.set_xlabel("Frequency(Hz)")
            ax2.set_ylabel("Gain")
            ax2.set_title("Lowpass Butterworth Filter Frequency Response")

            new_sig = y
            y1 = butter_lowpass_filter(new_sig, cutoff_freq2, sampling_freq1, order)

            T = 5.0  # Sample Period
            T1 = len(y) / sampling_freq1  # sample timeperiod

            nyq = 0.5 * sampling_freq1  # Nyquist freq
            order = 2
            n = int(T1 * sampling_freq1)  # total no of samples
            time = np.linspace(0, T1, n, endpoint='False')
            normalized_cutoff_freq = 2 * cutoff_freq2 / sampling_freq1

            numer_coeff_low, denom_coeff_low = signal.butter(order, normalized_cutoff_freq, btype='lowpass', analog=False)
            filtered_sig_low = signal.lfilter(numer_coeff_low, denom_coeff_low, new_sig)

            ax1.plot(x, new_sig, 'b-', label='Data')
            ax1.plot(x, filtered_sig_low, 'r-', label='Filtered Data')
            fig.legend(loc='upper right')
            ax1.set_xlabel("Time(Sec)")
            ax1.set_ylabel("Magnitude")
            ax1.set_title("Result of Lowpass Butterworth Filter")
            mplcursors.cursor(hover=True)
            plt.tight_layout()
            fig = plt.gcf()
            fig.canvas.manager.set_window_title('Highpass Filter Plot')
            plt.show()

    def digital_filter_highpass_plot1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y = self.parameter1_list.currentIndex()
        y = data[:, y]
        # y = data[:, 1]
        # z = data[:, 2]
        sampling_freq = self.samplingFreq.text()
        global sampling_freq1
        sampling_freq1 = float(sampling_freq)

        def butter_highpass(cutoff_freq, fs, order=5):
            nyq = 0.5 * fs
            normal_cutoff = cutoff_freq / nyq
            b, a = signal.butter(order, normal_cutoff, btype='high', analog=False)
            return b, a

        def butter_highpass_filter(data, cutoff_freq, fs, order=5):
            b, a = butter_highpass(cutoff_freq, fs, order=order)
            y = signal.filtfilt(b, a, data) 
            return y

        order = 2
        cutoff_freq = self.cutoff_freq.text()
        cutoff_freq1 = float(cutoff_freq)
        b, a = butter_highpass(cutoff_freq1, sampling_freq1, order)

        w, h = freqz(b, a, worN=512)
        ax2.plot(0.5 * sampling_freq1 * w / np.pi, np.abs(h), 'b')
        ax2.plot(cutoff_freq1, 0.5 * np.sqrt(2), 'ko')
        ax2.axvline(cutoff_freq1, c='k', label='Cutoff Frequency')
        ax2.set_xlabel("Frequency(Hz)")
        ax2.set_ylabel("Gain")
        ax2.set_title("Highpass Butterworth Filter Frequency Response")

        noise = np.random.normal(np.mean(y), np.std(y), len(y))
        new_sig = y + noise
        y1 = butter_highpass_filter(new_sig, cutoff_freq1, sampling_freq1, order)

        T = 5.0  # Sample Period
        fs = 20  # sample rate Hz
        T1 = len(y) / sampling_freq1  # sample timeperiod

        nyq = 0.5 * fs  # Nyquist freq
        order = 2
        n = int(T1 * fs)  # total no of samples
        time = np.linspace(0, T1, n, endpoint='False')
        normalized_cutoff_freq = 2 * cutoff_freq1 / sampling_freq1

        numer_coeff_low, denom_coeff_low = signal.butter(order, normalized_cutoff_freq, btype='highpass', analog=False)
        filtered_sig_low = signal.lfilter(numer_coeff_low, denom_coeff_low, new_sig)

        ax1.plot(x, new_sig, 'b-', label='Data')
        ax1.plot(x, filtered_sig_low, 'r-', label='Filtered Data')
        fig.legend(loc='upper right')
        ax1.set_xlabel("Time(Sec)")
        ax1.set_ylabel("Magnitude")
        ax1.set_title("Result of Highpass Butterworth Filter")
        mplcursors.cursor(hover=True)
        plt.tight_layout()
        fig = plt.gcf()
        fig.canvas.manager.set_window_title('Highpass Filter Plot')
        plt.show()

    def linear_regression_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)

        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]

        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]


        if (x1 == 0 or y1 == 0 ):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1, Parameter 2 ")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(x1 and y1):
            
            fig, ax = plt.subplots()
            slope, intercept, r, p, std_err = stats.linregress(x, y)

            def myfunc(x):
                return slope * x + intercept

            mymodel = list(map(myfunc, x))


            res = "Data set are in Blue dots and Linear Regression is the Red line"
            anchored_txt1 = AnchoredText(res, loc='lower left', prop=dict(size=12), frameon=True,
                                         bbox_to_anchor=(0., 1.),
                                         bbox_transform=ax.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax.add_artist(anchored_txt1)
            plt.scatter(x, y, label = 'Data Points')
            plt.plot(x, mymodel, color = 'red', label = 'Linear Regression')
            fig.legend()
            mplcursors.cursor(hover = True)
            str1 = self.parameter1_list.currentText()
            str2 = self.parameter2_list.currentText()
            plt.title("Linear Regression Result between " + str1 + " vs " + str2, loc = 'right')
            plt.xlabel(str1)
            plt.ylabel(str2)
            fig = plt.gcf()
            fig.canvas.manager.set_window_title('Linear Regression Plot')
            plt.show()

    def auto_corelation_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, ax = plt.subplots()
        df = np.loadtxt(fileName[0], skiprows=1)
        df1 = pd.DataFrame(df)
        df2 = df1.to_numpy()
        x1 = df2[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = df2[:, y1]
        # print(y)
        

        if(y1 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 ")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return



        str1 = self.parameter1_list.currentText()
        plt.acorr(y, maxlags=50) #maxlags????

        time_delay_str = "Autocorrelation Coeffecient ranges from +1 to -1" + "\n" + "If Autocorrelation Coeffecient:" + "\n" + " => +1, if Time Series 1 increase in value then " + "\n" + "  Time Series 2 also increase in propotion to change in Time Series 1" + "\n" + " => -1, if Time Series 1 increase in value then" + "\n" + "  Time Series 2  decrease in propotion to change in Time Series 1"
        anchored_txt1 = AnchoredText(time_delay_str, loc='lower left', prop=dict(size=11), frameon=True,
                                     bbox_to_anchor=(0., 1.),
                                     bbox_transform=ax.transAxes)
        anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
        ax.add_artist(anchored_txt1)

        plt.title("Result of Autocorrelation of " + str1)
        plt.xlabel("Lag(Sec)")
        plt.ylabel("Autocorrelation Coeffecient")
        mplcursors.cursor(hover=True)
        fig = plt.gcf()
        fig.canvas.manager.set_window_title('Autocorelation Plot')
        plt.show()

    def transfer_function_plt(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return


        str1 = self.parameter1_list.currentText()
        sns.set()
        data = np.loadtxt(fileName[0], skiprows = 1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        input = data[:, y1]

        str1 = self.parameter1_list.currentText()

        y2 = self.parameter2_list.currentIndex()
        output = data[:, y2]


        if(y1 == 0 and y2 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 & Parameter 2")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sys = signal.TransferFunction(input, output)
        try:
            time, response = signal.step(sys)
        except:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Memory error!!!")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select lesser samples and try again.")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        plt.plot(time, response)
        mplcursors.cursor(hover=True)
        plt.title("Transfer Function result of " + str1)
        plt.xlabel("Time(sec)")
        plt.ylabel("Amplitude")

        plt.show()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Plot = QtWidgets.QMainWindow()
    ui = Ui_Plot()
    ui.setupUi(Plot)
    Plot.show()
    sys.exit(app.exec_())



