# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'plot_ui_15.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import random
import matplotlib.pyplot as plt
import numpy as np
from scipy.fftpack import fft, ifft, fftfreq
from scipy.signal import find_peaks, butter, lfilter, freqz
from peakdetect import peakdetect
from matplotlib.offsetbox import AnchoredText
import mplcursors
# import scipy as sp
import pandas as pd
import seaborn as sns
from scipy.fft import fft, fftfreq, ifft, fftshift
from scipy import fftpack, stats, signal
import statistics
from scipy.stats import norm
import scipy.stats
# import matplotlib.pyplot as plt
# import numpy as np
# import seaborn as sns
# from scipy.signal import butter, lfilter, freqz
# import mplcursors
# from scipy import signal
import pylab
import math


class Ui_Plot(object):
    def setupUi(self, Plot):
        Plot.setObjectName("Plot")
        Plot.setEnabled(True)
        Plot.resize(1025, 581)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Plot.sizePolicy().hasHeightForWidth())
        Plot.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(Plot)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 20, 991, 141))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 56, 971, 81))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.samplingFreq = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.samplingFreq.setObjectName("samplingFreq")
        self.gridLayout.addWidget(self.samplingFreq, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 0, 6, 1, 1)
        self.cutoff_freq = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.cutoff_freq.setObjectName("cutoff_freq")
        self.gridLayout.addWidget(self.cutoff_freq, 0, 5, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(160, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 3, 1, 1)
        self.parameter1_list = QtWidgets.QComboBox(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.parameter1_list.sizePolicy().hasHeightForWidth())
        self.parameter1_list.setSizePolicy(sizePolicy)
        self.parameter1_list.setMinimumSize(QtCore.QSize(200, 0))
        self.parameter1_list.setMaximumSize(QtCore.QSize(235, 16777215))
        self.parameter1_list.setObjectName("parameter1_list")
        self.gridLayout.addWidget(self.parameter1_list, 1, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 1, 4, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 0, 4, 1, 1)
        self.parameter2_list = QtWidgets.QComboBox(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.parameter2_list.sizePolicy().hasHeightForWidth())
        self.parameter2_list.setSizePolicy(sizePolicy)
        self.parameter2_list.setMinimumSize(QtCore.QSize(225, 0))
        self.parameter2_list.setObjectName("parameter2_list")
        self.gridLayout.addWidget(self.parameter2_list, 1, 5, 1, 1)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 971, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.textBrowser = QtWidgets.QTextBrowser(self.horizontalLayoutWidget)
        self.textBrowser.setMaximumSize(QtCore.QSize(16777215, 30))
        self.textBrowser.setMouseTracking(False)
        self.textBrowser.setAcceptDrops(True)
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalLayout.addWidget(self.textBrowser)
        self.fileBrowse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.fileBrowse.setFont(font)
        self.fileBrowse.setObjectName("fileBrowse")
        self.horizontalLayout.addWidget(self.fileBrowse)
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 170, 991, 281))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setUnderline(True)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.groupBox_2)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 28, 981, 251))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.powerspectrum_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.powerspectrum_plt.setFont(font)
        self.powerspectrum_plt.setObjectName("powerspectrum_plt")
        self.gridLayout_2.addWidget(self.powerspectrum_plt, 3, 0, 1, 1)
        self.FFTPlot = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.FFTPlot.setFont(font)
        self.FFTPlot.setObjectName("FFTPlot")
        self.gridLayout_2.addWidget(self.FFTPlot, 0, 0, 1, 1)
        self.crosscorelation_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.crosscorelation_plt.setFont(font)
        self.crosscorelation_plt.setObjectName("crosscorelation_plt")
        self.gridLayout_2.addWidget(self.crosscorelation_plt, 4, 3, 1, 1)
        self.highpass_filter = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.highpass_filter.setFont(font)
        self.highpass_filter.setObjectName("highpass_filter")
        self.gridLayout_2.addWidget(self.highpass_filter, 2, 3, 1, 1)
        self.phasespectrum_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.phasespectrum_plt.setFont(font)
        self.phasespectrum_plt.setObjectName("phasespectrum_plt")
        self.gridLayout_2.addWidget(self.phasespectrum_plt, 3, 3, 1, 1)
        self.magnitudespectrum_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.magnitudespectrum_plt.setFont(font)
        self.magnitudespectrum_plt.setObjectName("magnitudespectrum_plt")
        self.gridLayout_2.addWidget(self.magnitudespectrum_plt, 5, 3, 1, 1)
        self.auto_corelation = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.auto_corelation.setFont(font)
        self.auto_corelation.setObjectName("auto_corelation")
        self.gridLayout_2.addWidget(self.auto_corelation, 4, 0, 1, 1)
        self.interpolation_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.interpolation_plt.setFont(font)
        self.interpolation_plt.setObjectName("interpolation_plt")
        self.gridLayout_2.addWidget(self.interpolation_plt, 1, 0, 1, 1)
        self.coherence_plt = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        font.setUnderline(False)
        self.coherence_plt.setFont(font)
        self.coherence_plt.setObjectName("coherence_plt")
        self.gridLayout_2.addWidget(self.coherence_plt, 1, 3, 1, 1)
        self.lowpass_filter = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.lowpass_filter.setFont(font)
        self.lowpass_filter.setObjectName("lowpass_filter")
        self.gridLayout_2.addWidget(self.lowpass_filter, 2, 0, 1, 1)
        self.smoothing = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.smoothing.setFont(font)
        self.smoothing.setObjectName("smoothing")
        self.gridLayout_2.addWidget(self.smoothing, 0, 3, 1, 1)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.gridLayoutWidget_2)
        self.plainTextEdit.setEnabled(False)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.gridLayout_2.addWidget(self.plainTextEdit, 0, 2, 6, 1)
        self.transfer_function = QtWidgets.QPushButton(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.transfer_function.setFont(font)
        self.transfer_function.setObjectName("transfer_function")
        self.gridLayout_2.addWidget(self.transfer_function, 5, 0, 1, 1)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(20, 460, 991, 80))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setUnderline(True)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.groupBox_3)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(10, 20, 971, 61))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.linear_regression = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.linear_regression.setFont(font)
        self.linear_regression.setObjectName("linear_regression")
        self.gridLayout_3.addWidget(self.linear_regression, 0, 4, 1, 1)
        self.distribution_func = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.distribution_func.setFont(font)
        self.distribution_func.setObjectName("distribution_func")
        self.gridLayout_3.addWidget(self.distribution_func, 0, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 0, 1, 1, 1)
        self.statistics_plt = QtWidgets.QPushButton(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.statistics_plt.setFont(font)
        self.statistics_plt.setObjectName("statistics_plt")
        self.gridLayout_3.addWidget(self.statistics_plt, 0, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(150, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem2, 0, 3, 1, 1)
        Plot.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Plot)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1025, 21))
        self.menubar.setObjectName("menubar")
        Plot.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Plot)
        self.statusbar.setObjectName("statusbar")
        Plot.setStatusBar(self.statusbar)

        str= "QPushButton{border:2px solid #6593cf; border-radius:8px; color:black; background: qlineargradient(x1:0,y1:0,x2:0,y2:1,stop: 0.0 #d4eafa,stop:0.5 #d4eafa,stop:0.55 #84aed9,stop:1.0 #84aed9); min-height:20; min-width:120; font-size:13px} QPushButton:pressed{ background-color:white; border:2px solid black; color:black;} ##QPushButton:hover{ border:2px solid #6593cf; border-radius:8px; color:black; background: qlineargradient(x1:0,y1:0,x2:0,y2:1,stop: 0.0 #d4eafa,stop:0.5 #d4eafa,stop:0.55 #84aed9,stop:1.0 #84aed9); border:2px solid #513dff; font-size:13px}"
        self.FFTPlot.setStyleSheet(str)
        self.FFTPlot.setToolTip("Required inputs:"+"\n"+"1.Sampling rate"+"\n"+"2. Parameter 1")
        self.interpolation_plt.setStyleSheet(str)
        self.interpolation_plt.setToolTip("1. Sampling rate" + "\n" + "2. Parameter 1")
        self.lowpass_filter.setStyleSheet(str)
        self.lowpass_filter.setToolTip("Required inputs:" + "\n" + "1. Cutoff Frequency" + "\n" + "2. Parameter 1")

        self.highpass_filter.setStyleSheet(str)
        self.highpass_filter.setToolTip("Required inputs:" + "\n" + "1. Cutoff Frequency" + "\n" + "2.Parameter 1")
        self.crosscorelation_plt.setStyleSheet(str)
        self.crosscorelation_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1" + "\n" + "3. Parameter 2")
        self.powerspectrum_plt.setStyleSheet(str)
        self.powerspectrum_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1")
        self.magnitudespectrum_plt.setStyleSheet(str)
        self.magnitudespectrum_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1")

        #self.interpolation_plt.setStyleSheet(str)
        self.smoothing.setStyleSheet(str)
        self.smoothing.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.coherence_plt.setStyleSheet(str)
        self.coherence_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1" + "\n" + "3. Parameter 2")
        #self.crosscorelation_plt.setStyleSheet(str)
        self.phasespectrum_plt.setStyleSheet(str)
        self.phasespectrum_plt.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1" + "\n" + "3. Parameter 2")
        self.auto_corelation.setStyleSheet(str)
        self.auto_corelation.setToolTip("Required inputs:" + "\n" + "1. Sampling Frequency" + "\n" + "2. Parameter 1")
        self.statistics_plt.setStyleSheet(str)
        self.statistics_plt.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.distribution_func.setStyleSheet(str)
        self.distribution_func.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.linear_regression.setStyleSheet(str)
        self.linear_regression.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")
        self.transfer_function.setStyleSheet(str)
        self.transfer_function.setToolTip("Required inputs:" + "\n" + "1. Parameter 1")

        self.groupBox.setStyleSheet("QGroupBox{ background-color: #bdafa8;  font-size: 15px; border: 1px solid gray;border-radius: 15px;  margin-top: 3ex;} QGroupBox::title { border:2px solid #ffaf87; background-color: #e6fc83; subcontrol-origin: margin; left:25px; padding: 0 3px 0 3px;}")

        self.groupBox_2.setStyleSheet(
            "QGroupBox{ background-color: #bdafa8; font-size: 15px; border: 1px solid gray;border-radius: 15px;  margin-top: 3ex;} QGroupBox::title { border:2px solid #ffaf87; background-color: #e6fc83; subcontrol-origin: margin; left:25px; padding: 0 3px 0 3px;}")

        self.groupBox_3.setStyleSheet(
            "QGroupBox{ background-color: #bdafa8; font-size: 15px; border: 1px solid gray;border-radius: 15px;  margin-top: 3ex;} QGroupBox::title { border:2px solid #ffaf87; background-color: #e6fc83; subcontrol-origin: margin; left:25px; padding: 0 3px 0 3px;}")




        self.retranslateUi(Plot)
        self.fileBrowse.clicked.connect(self.file)
        self.FFTPlot.clicked.connect(self.fft_plot)
        self.statistics_plt.clicked.connect(self.statistics_plt1)
        self.interpolation_plt.clicked.connect(self.interpolation_plt1)
        self.coherence_plt.clicked.connect(self.coherence_plt1)
        self.phasespectrum_plt.clicked.connect(self.phasespectrum_plt1)
        self.powerspectrum_plt.clicked['bool'].connect(self.powerspectrum_plt1)
        self.magnitudespectrum_plt.clicked.connect(self.magnitudespectrum_plt1)
        self.crosscorelation_plt.clicked.connect(self.Crosscorelation_plt1)
        self.auto_corelation.clicked.connect(self.auto_corelation_plt1)
        self.linear_regression.clicked.connect(self.linear_regression_plt1)
        self.distribution_func.clicked.connect(self.distributionfunc_plt1)
        self.lowpass_filter.clicked.connect(self.digital_filter_lowpass_plt1)
        self.highpass_filter.clicked.connect(self.digital_filter_highpass_plot1)
        self.smoothing.clicked.connect(self.Smoothing_plt1)
        self.transfer_function.clicked.connect(self.transfer_function_plt)

        QtCore.QMetaObject.connectSlotsByName(Plot)

    def retranslateUi(self, Plot):
        _translate = QtCore.QCoreApplication.translate
        Plot.setWindowTitle(_translate("Plot", "Data Analysis"))
        self.label_2.setText(_translate("Plot", "Sampling rate:"))
        self.label_3.setText(_translate("Plot", "Steps/Sec"))
        self.label_9.setText(_translate("Plot", "Hz"))
        self.label_4.setText(_translate("Plot", "Parameter 1:"))
        self.label_6.setText(_translate("Plot", "Parameter 2:"))
        self.label_8.setText(_translate("Plot", "Cutoff frequency:"))
        self.fileBrowse.setText(_translate("Plot", "Browse"))
        self.groupBox_2.setTitle(_translate("Plot", "Signal processing:"))
        self.powerspectrum_plt.setText(_translate("Plot", "Power Spectrum"))
        self.FFTPlot.setText(_translate("Plot", "FFT"))
        self.crosscorelation_plt.setText(_translate("Plot", "Cross Corelation"))
        self.highpass_filter.setText(_translate("Plot", "Highpass Filter"))
        self.phasespectrum_plt.setText(_translate("Plot", "Phase Spectrum"))
        self.magnitudespectrum_plt.setText(_translate("Plot", "Magnitude Specturm"))
        self.auto_corelation.setText(_translate("Plot", "Auto Correlation"))
        self.interpolation_plt.setText(_translate("Plot", "Interpolation"))
        self.coherence_plt.setText(_translate("Plot", "Coherence"))
        self.lowpass_filter.setText(_translate("Plot", "Lowpass Filter"))
        self.smoothing.setText(_translate("Plot", "Smoothing"))
        self.transfer_function.setText(_translate("Plot", "Transfer Function"))
        self.groupBox_3.setTitle(_translate("Plot", "Statistical Processing:"))
        self.linear_regression.setText(_translate("Plot", "Linear Regression"))
        self.distribution_func.setText(_translate("Plot", "Distribution Function"))
        self.statistics_plt.setText(_translate("Plot", "Statistics Report"))

    def file(self):
        ''' Called when the user presses the Browse button
        '''
        # self.debugPrint( "Browse button pressed" )
        options = QtWidgets.QFileDialog.Options()
        # options |= QtWidgets.QFileDialog.DontUseNativeDialog
        global fileName
        fileName = QtWidgets.QFileDialog.getOpenFileName(
            None,
            "Open",
            " ",
            "Text files(*.txt)",

            options=options)


        # filenm = self.textBrowser.append(fileName[0])
        if (fileName[0] == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input file")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif (fileName[0]):
            self.textBrowser.setText(fileName[0])
            with open(fileName[0]) as f:
                first_line = f.readline()
            params = first_line.split()  # list of parameters
            self.parameter1_list.clear()
            self.parameter2_list.clear()

            self.parameter1_list.addItems(params)
            self.parameter2_list.addItems(params)

            self.parameter1_list.update()
            self.parameter2_list.update()

    def fft_plot(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return


        global data
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        # y = self.signal_property.currentIndex()
        y1 = self.parameter1_list.currentIndex()
        #y2 = self.parameter2_list.currentIndex()
        y = data[:, y1]

        # content = self.signal_property.currentText()
        # print(content)

        sns.set()

        sampling_freq = self.samplingFreq.text()
        global sampling_freq1
        # sampling_freq1 = float(sampling_freq)
        # sampling_freq_index = self.samplingFreq.index()

        sr = 1024

        if (y1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the Sampling Rate")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return
            #self.cutoff_freq.setEnabled(False)
            #self.parameter2_list.setEnabled(False)


        fig, ax = plt.subplots()
        fft_plt = fft(y[1:])
        sampling_freq1 = float(sampling_freq)
        # fft_plt_freq = fftfreq(len(fft_plt[1:]), 1 / sampling_freq1)  ...bramhaji
        fft_lenth = len(fft_plt[1:])
        y_smapleLen = len(y)
        n = np.arange(fft_lenth)
        T = y_smapleLen / sampling_freq1  # time period
        freq = n / T  # FFT frequency
        f1 = freq[: fft_lenth]
        plt.plot(f1, abs(fft_plt[1:len(fft_plt)]))
        freqs = f1


        # freqs = fftpack.fftfreq(len(fft_plt)) * sampling_freq1  ...bramhaji

        # yplot = fftshift(fft_plt) ...bramhaji
        # y_abs = 1 / N * np.abs(yplot) ...bramhaji

        '''modified by rohit k'''
        y_abs = np.abs(fft_plt)
        Peaks_indices, properties = find_peaks(y_abs,0)

        pks_values = y_abs[Peaks_indices]
        pks_values=set(pks_values)

        if(len(Peaks_indices) < 5):
            y_abs = np.abs(fft_plt)
            Peaks_indices, properties = find_peaks(y_abs, 0)

            pks_values = y_abs[Peaks_indices]
            pks_values = set(pks_values)
            first_5_max_peasks = np.argpartition(properties['peak_heights'], -len(Peaks_indices))[-len(Peaks_indices):]
            res2 = "Magnitude"+ "           " +"Frequency\n";
            for x in first_5_max_peasks:
                ferq = freqs[Peaks_indices[x]]
                res2=res2+str("{:.3f}".format(y_abs[Peaks_indices[x]])) + "         " +str("{:.3f}".format(ferq)) + "\n"
        else:
            first_5_max_peasks = np.argpartition(properties['peak_heights'], -5)[-5:]
            res2 = "Magnitude"+"                "+"Frequency\n";
            for x in first_5_max_peasks:
                ferq = freqs[Peaks_indices[x]]
                res2 = res2 + str("{:.3f}".format(y_abs[Peaks_indices[x]])) +"          "+ str("{:.3f}".format(ferq)) + "\n"

        anchored_txt1 = AnchoredText(res2, loc='lower left', prop=dict(size=9.5), frameon=True,
                                     bbox_to_anchor=(0., 1.),
                                     bbox_transform=ax.transAxes)
        anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
        ax.add_artist(anchored_txt1)

        mplcursors.cursor(hover=True)
        plt.xlabel("Frequency(Hz)")
        plt.ylabel("FFT of the Signal(Magnitude)")
        str1 = self.parameter1_list.currentText()
        plt.title("FFT result of " + str1, loc='right')
        # fig.tight_layout()
        fig = pylab.gcf()
        fig.canvas.manager.set_window_title('FFT Plot')
        plt.show()
        '''self.parameter2_list.setEnabled(False)
        self.cutoff_freq.setEnabled(False)'''

    def statistics_plt1(self):
            if (self.textBrowser.toPlainText() == ""):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the input file")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                return

            sns.set()
            data = np.loadtxt(fileName[0], skiprows=1)
            x = data[:, 0]
            y1 = self.parameter1_list.currentIndex()
            y = data[:, y1]
            #print(type(self.textBrowser.toPlainText()))


            if (y1 == 0):
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Error in selection of input")
                msg.setWindowTitle("Warning")
                msg.setDetailedText("Please select the Parameter 1")
                res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
                msg.exec_()
                '''self.cutoff_freq.setEnabled(False)
                self.parameter2_list.setEnabled(False)
                self.samplingFreq.setEnabled(False)'''

            elif (y1):

                    fig, ax = plt.subplots()
                    Mean = statistics.mean(y)  # calculate average of the data
                    Median = statistics.median(y)
                    STD = statistics.stdev(y)
                    Mode = stats.mode(list(y))
                    Variance = np.var(y)

                    stat_res = "Statistics Report:" + "\n" + "  =>Mean is " + str(float(Mean)) + "\n" + "  =>Median is " + str(
                        float(Median)) + "\n" + "  =>Mode is " + str(
                        float(np.array(Mode)[0])) + "\n" + "  =>Standard Deviation is " + str(float(STD))  + "\n" + "  =>Variance is " + str(float(Variance))
                    anchored_txt1 = AnchoredText(stat_res, loc='lower left', prop=dict(size=10), frameon=True,
                                                 bbox_to_anchor=(0., 1.), bbox_transform=ax.transAxes)
                    anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
                    ax.add_artist(anchored_txt1)

                    # plt.axvline(x = np.mean(y), color = 'r', label = 'Mean')
                    plt.plot(x, y)
                    plt.title("Time Series Data")
                    plt.xlabel("Time(Sec)")
                    plt.ylabel("Amplitude")
                    plt.tight_layout()
                    fig = pylab.gcf()
                    fig.canvas.manager.set_window_title('Statistics Plot')
                    mplcursors.cursor(hover=True)
                    plt.show()
                    '''self.cutoff_freq.setEnabled(False)
                    self.parameter2_list.setEnabled(False)
                    self.samplingFreq.setEnabled(False)'''

    def powerspectrum_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        sampling_freq = self.samplingFreq.text()

        if (y1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            '''self.cutoff_freq.setEnabled(False)
            self.parameter2_list.setEnabled(False)'''
            # self.samplingFreq.setEnabled(False)

        elif (y1 ==0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            '''self.cutoff_freq.setEnabled(False)
            self.parameter2_list.setEnabled(False)'''

        elif(sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            '''self.cutoff_freq.setEnabled(False)
            self.parameter2_list.setEnabled(False)'''

        elif (y1 and sampling_freq):
            fig, ax = plt.subplots()
            yf = np.fft.fft(y)
            # plt.plot(abs(yf[1:len(yf)]))
            #sr = 1000
            sampling_freq1 = float(sampling_freq)
            #peaks = peakdetect(yf, lookahead=20)
            #high_peaks = np.array(peaks[0])
            # plt.plot(high_peaks[:, 0], high_peaks[:, 1], 'ro', label='Detected Peaks ')
            # plt.legend(loc='upper left')
            yf1 = np.fft.rfft(y)
            #N = len(yf[1:])
            #n = np.arange(N)
            #T = N / sampling_freq1  # time period
            #freq = n / T  # FFT frequency
            #t = np.arange(N)
            #f1 = freq[: N]

            # ps1 = 20*np.log10(np.abs(yf[1:len(np.fft.fft(y))]))
            ps1 = 20 * np.log10(np.abs(yf1[1:]))
            #abs_fft = np.abs(yf1)
            #
            str1 = self.parameter1_list.currentText()
            freq = np.linspace(0, sampling_freq1 / 2, len(ps1))
            res1 = "Maximum Power of " + str1 +" is " + str(float(max(list(ps1)))) + " dB"

            # stat_res = "Statistics Report:" + "\n" + "  =>Mean is " + str(float(Mean)) + "\n" + "  =>Median is " + str(float(Median)) + "\n" + "  =>Mode is " + str(float(np.array(Mode)[0])) + "\n" + "  =>Standard Deviation is " + str(float(STD))
            anchored_txt1 = AnchoredText(res1, loc='lower left', prop=dict(size=10), frameon=True,
                                         bbox_to_anchor=(0., 1.), bbox_transform=ax.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax.add_artist(anchored_txt1)

            magnitude = np.abs(ps1)
            pks, _ = find_peaks(magnitude[:30000], height=400)
            # print(magnitude[pks])
            # plt.plot(magnitude[:30000])
            # plt.plot(pks, magnitude[pks], "x")
            plt.plot(freq, ps1)
            max_freq = list(freq)
            print("Max freq is ", max(max_freq))
            print(freq.mean())

            # print(list(freq))
            plt.title(" Powerspectrum result of " + str1, loc = 'right')
            plt.xlabel("Frequency (Hz)")
            plt.ylabel("Power (dB)")
            mplcursors.cursor(hover=True)
            fig = pylab.gcf()
            fig.canvas.manager.set_window_title('Power Spectrum Plot')
            plt.show()


    def magnitudespectrum_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]

        fig, ax = plt.subplots()
        sampling_freq = self.samplingFreq.text()
        y2 = self.parameter1_list.currentText()

        if (y1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            '''self.cutoff_freq.setEnabled(False)
            self.parameter2_list.setEnabled(False)'''
            # self.samplingFreq.setEnabled(False)

        elif (y1 ==0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            '''self.cutoff_freq.setEnabled(False)
            self.parameter2_list.setEnabled(False)'''

        elif(sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif( y1 and sampling_freq):

            str1 = self.parameter1_list.currentText()
            sampling_freq1 = float(sampling_freq)
            # samp_freq1 = 1024  # sampling frequency
            plt.magnitude_spectrum(y, Fs=sampling_freq1)
            # plt.magnitude_spectrum(y, Fs=samp_freq1)
            plt.xlabel("Frequency (Hz)")
            plt.title("Magnitude Spectrum of " + str1)
            #mag = np.fft.fft(y)[1:len(np.fft.fft(y))]
            # print(abs(mag))
            # fft calculation
            '''N = len(y)
            T = 1 / sampling_freq1
            yf = fft(y)
            xf = fftfreq(N, T)
            xf = fftshift(xf)
            yplot = fftshift(yf)'''
            # plt.plot(xf, 1 / N * np.abs(yplot))

            '''y_abs = 1 / N * np.abs(yplot)
            magnitude = np.abs(xf)
            # print(max(mag))
            peak_find, _ = find_peaks(magnitude[:65535], height=300)
            plt.plot(magnitude[:65535])
            plt.plot(peak_find, magnitude[peak_find], 'x')'''
            mplcursors.cursor(hover=True)
            fig = pylab.gcf()
            fig.canvas.manager.set_window_title('Magnitude Spectrum Plot')
            plt.show()
            '''self.cutoff_freq.setEnabled(False)
            # self.samplingFreq.setEnabled(False)
            self.parameter2_list.setEnabled(False)'''

    def coherence_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()

        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        z1 = self.parameter2_list.currentIndex()
        z = data[:, z1]
        sampling_freq = self.samplingFreq.text()

        if (y1 == 0 or z1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1, Parameter 2 and enter the sampling frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return
            #self.cutoff_freq.setEnabled(False)
            # self.parameter2_list.setEnabled(False)

        fig, (ax1, ax2) = plt.subplots(2, 1)
        str1 = self.parameter1_list.currentText()
        str2 = self.parameter2_list.currentText()
        ax1.set_title("Time Series Plot representation of " + str1 + " and " + str2)
        ax1.plot(x, y, 'b', label=str1)
        ax1.plot(x, z, 'r', label=str2)
        # fig.legend()
        ax1.set_xlabel("Time(Sec)")
        ax1.set_ylabel("Amplitude(V)")
        '''y_watts = y ** 2
        y_mean = np.mean(y)
        y_std = np.std(y)
        noise = np.random.normal(y_mean, y_std, 100)

        target_snr_db = 10  # SNR

        # calculate the signal power and convert it into dB
        sig_avg_watts = np.mean(y)
        sig_avg_dB = 10 * np.log10(sig_avg_watts)

        # calculate noise according and then convert into watts
        noise_avg_dB = sig_avg_dB - target_snr_db
        noise_avg_watts = 10 ** (noise_avg_dB)

        # generate a sample of white noise
        mean_noise = 0
        noise_volts = np.random.normal(mean_noise, np.sqrt(noise_avg_watts), len(y_watts))
        sig_noise = y + noise_volts'''

        # plt.cohere(y, z)

        # global sampling_freq1
        #sampling_freq1 = float(sampling_freq)
        # sampling_freq = 1024
        #coh, f = signal.coherence(y, z, fs=sampling_freq1, nperseg=500)
        coh= plt.cohere(y, z)
        # plt.cohere(y, z, 256)
        cohArry=coh[0]
        freqArray=coh[1]
        indFreq=list(cohArry).index(max(list(cohArry)));
        FreqCorepndsToValue=list(freqArray)[indFreq];

        #plt.semilogy(coh, f, c='g', label='Coherence Spectrum')
        fig.legend()

        #print("Coherence between the Sine sig and Ramp sig: ", max(list(f)))
        #print("Frequency: ", max(list(coh)), " Hz")

        '''N = len(y)
        M = len(z)

        T = 1 / sampling_freq1

        yf = fft(y)
        zf = fft(z)

        xf = fftfreq(N, T)  # fft freq
        xf = fftshift(xf)
        yplot = fftshift(yf)
        # plt.plot(xf, 1 / N * np.abs(yplot))
        xf1 = fftfreq(M, T)
        xf1 = fftshift(xf1)

        phase = np.angle(yf) * 180 / np.pi
        phase1 = np.angle(zf) * 180 / np.pi

        print("Phase of Sig_1: ", max(phase))
        print("Phase of Sig_2: ", max(phase1))

        print("Freq of Sig_1: ", max(xf))
        print("Freq of Sig_2: ", max(xf1))

        string_res1 = "=>If:" + "\n" + "   Coherence = 1.0 then two signals are Coherent" + "\n" + "   Coherence < 1.0 then two signals are Coherent with some Added Noise" + "\n" + "   Coherence = 0 then two signals are not Coherent"
        string_res = "=>Coherence is: " + str(float(max(list(coh)))) + " at Frequency of " + str(float(max(list(
            coh)))) + " Hz" + "\n" + "=>Two Signals are Coherent if both are equal in Phase and Frequency" + "\n" + "=>Phase Angle of " + str1 + " and " + str2 + " are: " + str(
            float(max(phase))) + " Deg, " + str(
            float(max(phase1))) + " Deg" + "\n" + "=>Frequency of " + str1 + " and " + str2 + " are: " + str(
            float(max(xf))) + " Hz, " + str(float(max(xf1))) + " Hz" + "\n" + string_res1
        anchored_txt1 = AnchoredText(string_res, loc='lower left', prop=dict(size=11), frameon=True,
                                             bbox_to_anchor=(0., 1.), bbox_transform=ax1.transAxes)
        anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
        ax1.add_artist(anchored_txt1)

        plt.title("Coherence Spectrum between " + str1 + " and " + str2)'''

        string_res1 = "=>If:" + "\n" + "   Coherence = 1.0 then two signals are Coherent" + "\n" + "   Coherence < 1.0 then two signals are Coherent with some Added Noise" + "\n" + "   Coherence = 0 then two signals are not Coherent"
        string_res = "=>Max coherence value is: " + str(float(max(list(cohArry)))) + " at Frequency of " + str(float(FreqCorepndsToValue)) + " Hz" + "\n" "=>Two Signals are Coherent if both are equal in Phase and Frequency" + "\n" + string_res1
        anchored_txt1 = AnchoredText(string_res, loc='lower left', prop=dict(size=11), frameon=True,bbox_to_anchor=(0., 1.), bbox_transform=ax1.transAxes)
        anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
        ax1.add_artist(anchored_txt1)

        plt.title("Coherence Spectrum between " + str1 + " and " + str2)


        plt.ylabel("Coherence")
        plt.xlabel("Frequency (Hz)")
        mplcursors.cursor(hover=True)
        plt.tight_layout()
        fig = pylab.gcf()
        fig.canvas.manager.set_window_title('Coherence Plot')
        plt.show()

    def phasespectrum_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]

        plt.phase_spectrum(y, color = 'red')
        fig = plt.gcf()
        fig.canvas.manager.set_window_title("Phase Spectrum")
        mplcursors.cursor(hover = True)
        plt.show()

    def interpolation_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2, 1)
        data = pd.read_csv(fileName[0], sep = '\t', header = 0)
        df = pd.DataFrame(data)
        print(df)

        interp_res = df.interpolate(method='linear', limit_direction='forward')
        df1 = pd.DataFrame(interp_res)


        numpy_array1 = df.to_numpy()  # converting dataframe into numpy array

        x = numpy_array1[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = numpy_array1[:, y1]
        ax1.plot(x, y, c='b', label='Original Data')
        ax1.set_title("Time Series Data")
        ax1.set_ylabel("Amplitude (V)")
        ax1.set_xlabel("Time(Sec)")

        numpy_array2 = df1.to_numpy()
        p = numpy_array2[:, 0]
        q = numpy_array2[:, y1]

        mplcursors.cursor(hover=True)
        fig.legend(loc='upper right')


        plt.xlabel("Time (Sec)")
        ax2.set_title("Result of Interpolation")
        ax2.plot(x, q, c = 'k', label = 'Data after Interpolation')
        fig.legend(loc='upper right')
        ax2.set_xlabel("Time(Sec)")
        ax2.set_ylabel("Amplitude(V)")
        plt.show()

    def Crosscorelation_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, [ax1, ax2] = plt.subplots(2)
        # fig, (ax1, ax2, ax3) = plt.subplots(3)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        z1 = self.parameter2_list.currentIndex()
        z = data[:, z1]
        sampling_freq = self.samplingFreq.text()
        #sampling_freq1 = float(sampling_freq)
        if (y1 and z1 and sampling_freq):

            sampling_freq1 = float(sampling_freq)
            N = len(y)
            corr = signal.correlate(z, y, mode='same') / np.sqrt(
                signal.correlate(y, y, mode='same')[int(N / 2)] * signal.correlate(z, z, mode='same')[int(N / 2)])
            delay_arr = np.linspace(-0.5 * N / sampling_freq1, 0.5 * N / sampling_freq1, N)
            delay = delay_arr[np.argmax(corr)]
            # print("First signal is " + str(delay) + " behind Second signal")
            str1 = self.parameter1_list.currentText()
            str2 = self.parameter2_list.currentText()
            plt.xlabel("Lag of " + str1 + " relative " + " to " + str2 + " (Sec)")
            plt.ylabel("Crosscorrelation Coeffecient")
            # print(corr)
            # print("Max corelation coeff: ", max(corr))

            ax2.plot(delay_arr, corr, c='g', label='Crosscorelation spectrum')

            time_delay_str = "Crosscorelation of " + str1 + " and " + str2 + "\n" + str1 + " is " + str(
                float(delay)) + " sec " + "\n" + " lags the " + str2 + "\n" + "Max Corelation Coeff: " + str(
                float(max(corr)))
            anchored_txt1 = AnchoredText(time_delay_str, loc='lower left', prop=dict(size=11.5), frameon=True,
                                         bbox_to_anchor=(0., 1.),
                                         bbox_transform=ax1.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax1.add_artist(anchored_txt1)

            ax1.set_title("Time Series of " + str1 + " and " + str2)
            ax2.set_title("Result of Crosscorelation Spectrum")
            ax1.plot(x, y, 'b', label=str1)
            ax1.plot(x, z, 'r', label=str2)
            fig.legend()

            # ax1.set_label(["First Signal"], ["Second Signal"])
            ax1.set_xlabel("Time")
            ax1.set_ylabel("Amplitude")
            mplcursors.cursor(hover=True)
            plt.tight_layout()
            fig = pylab.gcf()
            fig.canvas.manager.set_window_title('Crosscorelation Plot')
            # plt.show()
            #self.cutoff_freq.setEnabled(False)
            plt.show()

        # self.samplingFreq.setEnabled(False)
        # self.parameter2_list.setEnabled(False)
        elif(y1 == 0 or z1 == 0 or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in input selection")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select Parameter1, Parameter 2 and enter the Sampling Frequency")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

    def Smoothing_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2, 1)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        # z = data[:,2]

        #noise = np.random.normal(np.mean(y), np.std(y), len(y))
        new_sig = y

        '''p = np.linspace(0, 2*np.pi, 65535)
        q = np.sin(p) + np.cos(p) + np.random.random(65535)
        ax1.plot(p, q)'''
        str1 = self.parameter1_list.currentText()
        ax1.plot(x, y, label = str1)
        ax1.set_title("Origianl Signal")
        ax1.set_ylabel("Amplitude")
        ax1.set_xlabel("Time")
        yhat = signal.savgol_filter(new_sig, 21, 2)

        # ax1.plot(x, sig_noise, label = 'Original Signal')
        ax2.set_title("Result of Smoothing")
        ax2.plot(x, yhat, c='r', label= str1 + ' after Smoothing')
        fig.legend(loc='upper right')
        mplcursors.cursor(hover=True)
        ax2.set_ylabel("Amplitude")
        ax2.set_xlabel("Time")
        plt.title("Result of the Smoothed signal")

        new_sig_fft = fftpack.fft(new_sig)
        angle = np.angle(new_sig_fft) * 180 / np.pi
        #print("Phase angle: ", max(list(angle)))
        fig = pylab.gcf()
        fig.canvas.manager.set_window_title('Smoothing Plot')
        plt.show()
        '''self.cutoff_freq.setEnabled(False)
        self.samplingFreq.setEnabled(False)
        self.parameter2_list.setEnabled(False)'''

    def distributionfunc_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        data1 = np.random.normal(np.min(y), np.max(y), 150)
        fig, ax = plt.subplots()

        if(y1 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("No parameters selection")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select Parameter1")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(y1):

            str1 = self.parameter1_list.currentText()
            Mean = np.mean(y)
            Mean_abs = abs(Mean)
            #Std = np.std(y)
            Mean, Std = norm.fit(data1)
            plt.hist(data1, bins=25, density=True, alpha=0.6)
            #min = np.min(y)
            #max = np.max(y)
            min, max = plt.xlim()
            p = np.linspace(min, max, 100)
            q = scipy.stats.norm.pdf(p, Mean, Std)

            #r = scipy.stats.norm.cdf(p, Mean, Std)
            ax.plot(p, q, 'k', label='PDF ' + ' of ' + str1)
            fig.legend()
            # ax.plot(p, r, 'r', label = 'CDF')
            plt.xlabel("Data Points")
            plt.ylabel("Probability Density")
            plt.title("Histogram representation of " + str1 + " with Distribution function", loc = 'right')
            res = "Histogram of " + str1 +  "\n" + "     => Mean ($\mu) = " + str(
                float(Mean_abs)) + "$" + "\n" + "    => STD ($\sigma) = " + str(float(Std)) + "$"
            anchored_txt1 = AnchoredText(res, loc='lower left', prop=dict(size=10.0), frameon=True,
                                         bbox_to_anchor=(0., 1.),
                                         bbox_transform=ax.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax.add_artist(anchored_txt1)

            fig.tight_layout()
            fig = pylab.gcf()
            fig.canvas.manager.set_window_title('Distribution Function Plot')
            mplcursors.cursor(hover=True)
            plt.show()

    def digital_filter_lowpass_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = data[:, y1]
        sampling_freq = self.samplingFreq.text()
        cutoff_freq1 = self.cutoff_freq.text()
        #cutoff_freq2 = float(cutoff_freq1)
        # y = data[:, 1]
        # z = data[:, 2]
        if(y1 == 0 or cutoff_freq1 == "" or sampling_freq == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 and enter the Sampling frequency, Cutoff frequency ")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()

        elif(y1 and cutoff_freq1 and sampling_freq):
            cutoff_freq2 = float(cutoff_freq1)
            global sampling_freq1
            sampling_freq1 = float(sampling_freq)
            def butter_lowpass(cutoff_freq2, fs, order=5):
                nyq = 0.5 * fs
                normal_cutoff = cutoff_freq2 / nyq
                b, a = butter(order, normal_cutoff, btype='low',
                              analog=False)  # for low pass filter freq response btype = low, whereas btype = high for high pass filter
                # b, a = butter(order, normal_cutoff, btype='high', analog=False)# for high pass filter
                return b, a

            def butter_lowpass_filter(data, cutoff_freq2, fs, order=5):
                b, a = butter_lowpass(cutoff_freq2, fs, order=order)
                y = lfilter(b, a, data)  # for lowpass filter
                # y = signal.filtfilt(b, a, data)#for highpass filter
                return y

            # fs = 1000  # sample rate in hz from the user input

            #global sampling_freq1
            #sampling_freq1 = float(sampling_freq)
            # cutoff_freq = 100  # cutoff freq is user input
            Nyq = 0.5 * sampling_freq1  # Nyquist freq
            order = 2
            # cutoff_freq = 1.32  # cutoff freq has to be defined from the user
            #cutoff_freq = self.cutoff_freq.text()
            #cutoff_freq1 = float(cutoff_freq)
            b, a = butter_lowpass(cutoff_freq2, sampling_freq1, order)

            w, h = freqz(b, a, worN=512)
            ax2.plot(0.5 * sampling_freq1 * w / np.pi, np.abs(h), 'b')
            ax2.plot(cutoff_freq2, 0.5 * np.sqrt(2), 'ko')
            ax2.axvline(cutoff_freq2, c='k', label='Cutoff frequency')
            ax2.set_xlabel("Frequency(Hz)")
            ax2.set_ylabel("Gain")
            ax2.set_title("Lowpass Butterworth Filter Frequency Response")

            #noise = np.random.normal(np.mean(y), np.std(y), len(y))
            #new_sig = y + noise
            new_sig = y
            y1 = butter_lowpass_filter(new_sig, cutoff_freq2, sampling_freq1, order)

            T = 5.0  # Sample Period
            # fs = 20  # sample rate Hz
            T1 = len(y) / sampling_freq1  # sample timeperiod

            nyq = 0.5 * sampling_freq1  # Nyquist freq
            order = 2
            n = int(T1 * sampling_freq1)  # total no of samples
            time = np.linspace(0, T1, n, endpoint='False')
            normalized_cutoff_freq = 2 * cutoff_freq2 / sampling_freq1

            # low pass filter if btype = 'highpass' then it is for high pass filter
            # low pass filter if btype = 'lowpass' then it is for high pass filter
            numer_coeff_low, denom_coeff_low = signal.butter(order, normalized_cutoff_freq, btype='lowpass', analog=False)
            filtered_sig_low = signal.lfilter(numer_coeff_low, denom_coeff_low, new_sig)

            ax1.plot(x, new_sig, 'b-', label='Data')
            ax1.plot(x, filtered_sig_low, 'r-', label='Filtered Data')
            fig.legend(loc='upper right')
            ax1.set_xlabel("Time(Sec)")
            ax1.set_ylabel("Magnitude")
            ax1.set_title("Result of Lowpass Butterworth Filter")
            mplcursors.cursor(hover=True)
            plt.tight_layout()
            fig = pylab.gcf()
            fig.canvas.manager.set_window_title('Highpass Filter Plot')
            plt.show()
            # self.cutoff_freq.setEnabled(False)
            # self.samplingFreq.setEnabled(False)
            # self.parameter2_list.setEnabled(False)

    def digital_filter_highpass_plot1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, (ax1, ax2) = plt.subplots(2)
        data = np.loadtxt(fileName[0], skiprows=1)
        x = data[:, 0]
        y = self.parameter1_list.currentIndex()
        y = data[:, y]
        # y = data[:, 1]
        # z = data[:, 2]
        sampling_freq = self.samplingFreq.text()
        global sampling_freq1
        sampling_freq1 = float(sampling_freq)

        def butter_highpass(cutoff_freq, fs, order=5):
            nyq = 0.5 * fs
            normal_cutoff = cutoff_freq / nyq
            # b, a = butter(order, normal_cutoff, btype='low', analog=False)#for low pass filter freq response btype = low, whereas btype = high for high pass filter
            b, a = signal.butter(order, normal_cutoff, btype='high', analog=False)  # for high pass filter
            return b, a

        def butter_highpass_filter(data, cutoff_freq, fs, order=5):
            b, a = butter_highpass(cutoff_freq, fs, order=order)
            # y = lfilter(b, a, data)#for lowpass filter
            y = signal.filtfilt(b, a, data)  # for highpass filter
            return y

        '''fs = 10  # sample rate in hz
        cutoff_freq = 1.54  # cutoff freq is user input
        Nyq = 0.5 * fs  # Nyquist freq'''
        order = 2
        cutoff_freq = self.cutoff_freq.text()
        cutoff_freq1 = float(cutoff_freq)
        b, a = butter_highpass(cutoff_freq1, sampling_freq1, order)

        w, h = freqz(b, a, worN=512)
        ax2.plot(0.5 * sampling_freq1 * w / np.pi, np.abs(h), 'b')
        ax2.plot(cutoff_freq1, 0.5 * np.sqrt(2), 'ko')
        ax2.axvline(cutoff_freq1, c='k', label='Cutoff Frequency')
        ax2.set_xlabel("Frequency(Hz)")
        ax2.set_ylabel("Gain")
        ax2.set_title("Highpass Butterworth Filter Frequency Response")

        noise = np.random.normal(np.mean(y), np.std(y), len(y))
        new_sig = y + noise
        y1 = butter_highpass_filter(new_sig, cutoff_freq1, sampling_freq1, order)

        T = 5.0  # Sample Period
        fs = 20  # sample rate Hz
        T1 = len(y) / sampling_freq1  # sample timeperiod
        # cutoff_freq = 1.32  # cutoff freq has to be defined from the user

        nyq = 0.5 * fs  # Nyquist freq
        order = 2
        n = int(T1 * fs)  # total no of samples
        time = np.linspace(0, T1, n, endpoint='False')
        normalized_cutoff_freq = 2 * cutoff_freq1 / sampling_freq1

        # low pass filter if btype = 'high' then it is for high pass filter
        numer_coeff_low, denom_coeff_low = signal.butter(order, normalized_cutoff_freq, btype='highpass', analog=False)
        filtered_sig_low = signal.lfilter(numer_coeff_low, denom_coeff_low, new_sig)

        ax1.plot(x, new_sig, 'b-', label='Data')
        ax1.plot(x, filtered_sig_low, 'r-', label='Filtered Data')
        fig.legend(loc='upper right')
        ax1.set_xlabel("Time(Sec)")
        ax1.set_ylabel("Magnitude")
        ax1.set_title("Result of Highpass Butterworth Filter")
        mplcursors.cursor(hover=True)
        plt.tight_layout()
        fig = pylab.gcf()
        fig.canvas.manager.set_window_title('Highpass Filter Plot')
        plt.show()

    def linear_regression_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        data = np.loadtxt(fileName[0], skiprows=1)
        x1 = self.parameter1_list.currentIndex()
        x = data[:, x1]
        y1 = self.parameter2_list.currentIndex()
        y = data[:, y1]


        if (x1 == 0 or y1 == 0 ):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1, Parameter 2 ")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            #self.cutoff_freq.setEnabled(False)

        elif(x1 and y1):

            fig, ax = plt.subplots()
            slope, intercept, r, p, std_err = stats.linregress(x, y)

            def myfunc(x):
                return slope * x + intercept

            mymodel = list(map(myfunc, x))


            res = "Data set are in Blue dots and Linear Regression is the Red line"
            anchored_txt1 = AnchoredText(res, loc='lower left', prop=dict(size=12), frameon=True,
                                         bbox_to_anchor=(0., 1.),
                                         bbox_transform=ax.transAxes)
            anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
            ax.add_artist(anchored_txt1)
            plt.scatter(x, y, label = 'Data Points')
            plt.plot(x, mymodel, color = 'red', label = 'Linear Regression')
            fig.legend()
            mplcursors.cursor(hover = True)
            str1 = self.parameter1_list.currentText()
            str2 = self.parameter2_list.currentText()
            plt.title("Linear Regression Result between " + str1 + " vs " + str2, loc = 'right')
            plt.xlabel(str1)
            plt.ylabel(str2)
            fig = pylab.gcf()
            fig.canvas.manager.set_window_title('Linear Regression Plot')
            plt.show()

    def auto_corelation_plt1(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sns.set()
        fig, ax = plt.subplots()
        df = pd.read_csv(fileName[0], skiprows=1, delimiter="\t", header=None)
        df1 = pd.DataFrame(df)
        df2 = df1.to_numpy()
        #data = np.loadtxt(fileName[0], skiprows=1)
        #df2 = np.loadtxt(fileName[0], skiprows=1)
        x1 = df2[:, 0]
        y1 = self.parameter1_list.currentIndex()
        y = df2[:, y1]
        #y2 = self.parameter2_list.currentIndex()

        if(y1 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 ")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return



        str1 = self.parameter1_list.currentText()
        plt.acorr(y, maxlags=50) #maxlags????

        time_delay_str = "Autocorrelation Coeffecient ranges from +1 to -1" + "\n" + "If Autocorrelation Coeffecient:" + "\n" + " => +1, if Time Series 1 increase in value then " + "\n" + "  Time Series 2 also increase in propotion to change in Time Series 1" + "\n" + " => -1, if Time Series 1 increase in value then" + "\n" + "  Time Series 2  decrease in propotion to change in Time Series 1"
        anchored_txt1 = AnchoredText(time_delay_str, loc='lower left', prop=dict(size=11), frameon=True,
                                     bbox_to_anchor=(0., 1.),
                                     bbox_transform=ax.transAxes)
        anchored_txt1.patch.set_boxstyle("round, pad = 0., rounding_size = 0.2")
        ax.add_artist(anchored_txt1)

        plt.title("Result of Autocorrelation of " + str1)
        plt.xlabel("Lag(Sec)")
        plt.ylabel("Autocorrelation Coeffecient")
        mplcursors.cursor(hover=True)
        fig = pylab.gcf()
        fig.canvas.manager.set_window_title('Autocorelation Plot')
        plt.show()

    def transfer_function_plt(self):

        if (self.textBrowser.toPlainText() == ""):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the input file")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return


        str1 = self.parameter1_list.currentText()
        sns.set()
        data = np.loadtxt(fileName[0], skiprows = 1)
        x = data[:, 0]
        y1 = self.parameter1_list.currentIndex()
        input = data[:, y1]

        y2 = self.parameter2_list.currentIndex()
        output = data[:, y2]


        if(y1 == 0 and y2 == 0):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Error in selection of input")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select the Parameter 1 & Parameter 2")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        sys = signal.TransferFunction(input, output)
        try:
            time, response = signal.step(sys)
        except:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Memory error!!!")
            msg.setWindowTitle("Warning")
            msg.setDetailedText("Please select lesser samples and try again.")
            res = msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
            msg.exec_()
            return

        plt.plot(time, response)
        mplcursors.cursor(hover=True)
        plt.title("Transfer Function result of " + str1)
        plt.xlabel("Time(sec)")
        plt.ylabel("Amplitude")

        plt.show()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Plot = QtWidgets.QMainWindow()
    ui = Ui_Plot()
    ui.setupUi(Plot)
    Plot.show()
    sys.exit(app.exec_())
